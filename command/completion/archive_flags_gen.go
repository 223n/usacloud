// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ArchiveListCompleteFlags(ctx command.Context, params *params.ListArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Archive"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["list"].Params["id"].CompleteFunc
	case "scope":
		comp = define.Resources["Archive"].Commands["list"].Params["scope"].CompleteFunc
	case "tags":
		comp = define.Resources["Archive"].Commands["list"].Params["tags"].CompleteFunc
	case "source-archive-id":
		comp = define.Resources["Archive"].Commands["list"].Params["source-archive-id"].CompleteFunc
	case "source-disk-id":
		comp = define.Resources["Archive"].Commands["list"].Params["source-disk-id"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["Archive"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["Archive"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["Archive"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveCreateCompleteFlags(ctx command.Context, params *params.CreateArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "source-disk-id":
		comp = define.Resources["Archive"].Commands["create"].Params["source-disk-id"].CompleteFunc
	case "source-archive-id":
		comp = define.Resources["Archive"].Commands["create"].Params["source-archive-id"].CompleteFunc
	case "size":
		comp = define.Resources["Archive"].Commands["create"].Params["size"].CompleteFunc
	case "archive-file":
		comp = define.Resources["Archive"].Commands["create"].Params["archive-file"].CompleteFunc
	case "name":
		comp = define.Resources["Archive"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Archive"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Archive"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Archive"].Commands["create"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["create"].Params["assumeyes"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveReadCompleteFlags(ctx command.Context, params *params.ReadArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Archive"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveUpdateCompleteFlags(ctx command.Context, params *params.UpdateArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Archive"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Archive"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Archive"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Archive"].Commands["update"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveDeleteCompleteFlags(ctx command.Context, params *params.DeleteArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveUploadCompleteFlags(ctx command.Context, params *params.UploadArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "archive-file":
		comp = define.Resources["Archive"].Commands["upload"].Params["archive-file"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["upload"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["upload"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveDownloadCompleteFlags(ctx command.Context, params *params.DownloadArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "file-destination":
		comp = define.Resources["Archive"].Commands["download"].Params["file-destination"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["download"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["download"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveFtpOpenCompleteFlags(ctx command.Context, params *params.FtpOpenArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["ftp-open"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["ftp-open"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveFtpCloseCompleteFlags(ctx command.Context, params *params.FtpCloseArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["Archive"].Commands["ftp-close"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Archive"].Commands["ftp-close"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ArchiveWaitForCopyCompleteFlags(ctx command.Context, params *params.WaitForCopyArchiveParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Archive"].Commands["wait-for-copy"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
