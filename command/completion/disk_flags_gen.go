// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func DiskListCompleteFlags(ctx command.Context, params *params.ListDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Disk"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["list"].Params["id"].CompleteFunc
	case "scope":
		comp = define.Resources["Disk"].Commands["list"].Params["scope"].CompleteFunc
	case "tags":
		comp = define.Resources["Disk"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["Disk"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["Disk"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["Disk"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskCreateCompleteFlags(ctx command.Context, params *params.CreateDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "plan":
		comp = define.Resources["Disk"].Commands["create"].Params["plan"].CompleteFunc
	case "connection":
		comp = define.Resources["Disk"].Commands["create"].Params["connection"].CompleteFunc
	case "source-archive-id":
		comp = define.Resources["Disk"].Commands["create"].Params["source-archive-id"].CompleteFunc
	case "source-disk-id":
		comp = define.Resources["Disk"].Commands["create"].Params["source-disk-id"].CompleteFunc
	case "size":
		comp = define.Resources["Disk"].Commands["create"].Params["size"].CompleteFunc
	case "distant-from":
		comp = define.Resources["Disk"].Commands["create"].Params["distant-from"].CompleteFunc
	case "name":
		comp = define.Resources["Disk"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Disk"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Disk"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Disk"].Commands["create"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["create"].Params["assumeyes"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskReadCompleteFlags(ctx command.Context, params *params.ReadDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Disk"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskUpdateCompleteFlags(ctx command.Context, params *params.UpdateDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "connection":
		comp = define.Resources["Disk"].Commands["update"].Params["connection"].CompleteFunc
	case "name":
		comp = define.Resources["Disk"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Disk"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Disk"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Disk"].Commands["update"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskDeleteCompleteFlags(ctx command.Context, params *params.DeleteDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskEditCompleteFlags(ctx command.Context, params *params.EditDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "hostname":
		comp = define.Resources["Disk"].Commands["edit"].Params["hostname"].CompleteFunc
	case "password":
		comp = define.Resources["Disk"].Commands["edit"].Params["password"].CompleteFunc
	case "ssh-key-ids":
		comp = define.Resources["Disk"].Commands["edit"].Params["ssh-key-ids"].CompleteFunc
	case "disable-password-auth", "disable-pw-auth":
		comp = define.Resources["Disk"].Commands["edit"].Params["disable-password-auth"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["Disk"].Commands["edit"].Params["ipaddress"].CompleteFunc
	case "default-route", "gateway":
		comp = define.Resources["Disk"].Commands["edit"].Params["default-route"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Disk"].Commands["edit"].Params["nw-masklen"].CompleteFunc
	case "startup-script-ids", "note-ids":
		comp = define.Resources["Disk"].Commands["edit"].Params["startup-script-ids"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["edit"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["edit"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskReinstallFromArchiveCompleteFlags(ctx command.Context, params *params.ReinstallFromArchiveDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "source-archive-id":
		comp = define.Resources["Disk"].Commands["reinstall-from-archive"].Params["source-archive-id"].CompleteFunc
	case "distant-from":
		comp = define.Resources["Disk"].Commands["reinstall-from-archive"].Params["distant-from"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["reinstall-from-archive"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["reinstall-from-archive"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskReinstallFromDiskCompleteFlags(ctx command.Context, params *params.ReinstallFromDiskDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "source-disk-id":
		comp = define.Resources["Disk"].Commands["reinstall-from-disk"].Params["source-disk-id"].CompleteFunc
	case "distant-from":
		comp = define.Resources["Disk"].Commands["reinstall-from-disk"].Params["distant-from"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["reinstall-from-disk"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["reinstall-from-disk"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskReinstallToBlankCompleteFlags(ctx command.Context, params *params.ReinstallToBlankDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "distant-from":
		comp = define.Resources["Disk"].Commands["reinstall-to-blank"].Params["distant-from"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["reinstall-to-blank"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["reinstall-to-blank"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskServerConnectCompleteFlags(ctx command.Context, params *params.ServerConnectDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "server-id":
		comp = define.Resources["Disk"].Commands["server-connect"].Params["server-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["server-connect"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["server-connect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskServerDisconnectCompleteFlags(ctx command.Context, params *params.ServerDisconnectDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["Disk"].Commands["server-disconnect"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["server-disconnect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskMonitorCompleteFlags(ctx command.Context, params *params.MonitorDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "end":
		comp = define.Resources["Disk"].Commands["monitor"].Params["end"].CompleteFunc
	case "id":
		comp = define.Resources["Disk"].Commands["monitor"].Params["id"].CompleteFunc
	case "key-format":
		comp = define.Resources["Disk"].Commands["monitor"].Params["key-format"].CompleteFunc
	case "start":
		comp = define.Resources["Disk"].Commands["monitor"].Params["start"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DiskWaitForCopyCompleteFlags(ctx command.Context, params *params.WaitForCopyDiskParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Disk"].Commands["wait-for-copy"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
