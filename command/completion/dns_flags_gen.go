// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func DNSListCompleteFlags(ctx command.Context, params *params.ListDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["DNS"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["DNS"].Commands["list"].Params["id"].CompleteFunc
	case "tags":
		comp = define.Resources["DNS"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["DNS"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["DNS"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["DNS"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSRecordInfoCompleteFlags(ctx command.Context, params *params.RecordInfoDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["DNS"].Commands["record-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSCreateCompleteFlags(ctx command.Context, params *params.CreateDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["DNS"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["DNS"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["DNS"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["DNS"].Commands["create"].Params["icon-id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSRecordAddCompleteFlags(ctx command.Context, params *params.RecordAddDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["DNS"].Commands["record-add"].Params["name"].CompleteFunc
	case "type":
		comp = define.Resources["DNS"].Commands["record-add"].Params["type"].CompleteFunc
	case "value":
		comp = define.Resources["DNS"].Commands["record-add"].Params["value"].CompleteFunc
	case "ttl":
		comp = define.Resources["DNS"].Commands["record-add"].Params["ttl"].CompleteFunc
	case "mx-priority":
		comp = define.Resources["DNS"].Commands["record-add"].Params["mx-priority"].CompleteFunc
	case "srv-priority":
		comp = define.Resources["DNS"].Commands["record-add"].Params["srv-priority"].CompleteFunc
	case "srv-weight":
		comp = define.Resources["DNS"].Commands["record-add"].Params["srv-weight"].CompleteFunc
	case "srv-port":
		comp = define.Resources["DNS"].Commands["record-add"].Params["srv-port"].CompleteFunc
	case "srv-target":
		comp = define.Resources["DNS"].Commands["record-add"].Params["srv-target"].CompleteFunc
	case "id":
		comp = define.Resources["DNS"].Commands["record-add"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSReadCompleteFlags(ctx command.Context, params *params.ReadDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["DNS"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSRecordUpdateCompleteFlags(ctx command.Context, params *params.RecordUpdateDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["DNS"].Commands["record-update"].Params["index"].CompleteFunc
	case "name":
		comp = define.Resources["DNS"].Commands["record-update"].Params["name"].CompleteFunc
	case "type":
		comp = define.Resources["DNS"].Commands["record-update"].Params["type"].CompleteFunc
	case "value":
		comp = define.Resources["DNS"].Commands["record-update"].Params["value"].CompleteFunc
	case "ttl":
		comp = define.Resources["DNS"].Commands["record-update"].Params["ttl"].CompleteFunc
	case "mx-priority":
		comp = define.Resources["DNS"].Commands["record-update"].Params["mx-priority"].CompleteFunc
	case "srv-priority":
		comp = define.Resources["DNS"].Commands["record-update"].Params["srv-priority"].CompleteFunc
	case "srv-weight":
		comp = define.Resources["DNS"].Commands["record-update"].Params["srv-weight"].CompleteFunc
	case "srv-port":
		comp = define.Resources["DNS"].Commands["record-update"].Params["srv-port"].CompleteFunc
	case "srv-target":
		comp = define.Resources["DNS"].Commands["record-update"].Params["srv-target"].CompleteFunc
	case "id":
		comp = define.Resources["DNS"].Commands["record-update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSRecordDeleteCompleteFlags(ctx command.Context, params *params.RecordDeleteDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["DNS"].Commands["record-delete"].Params["index"].CompleteFunc
	case "id":
		comp = define.Resources["DNS"].Commands["record-delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSUpdateCompleteFlags(ctx command.Context, params *params.UpdateDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "description", "desc":
		comp = define.Resources["DNS"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["DNS"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["DNS"].Commands["update"].Params["icon-id"].CompleteFunc
	case "id":
		comp = define.Resources["DNS"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func DNSDeleteCompleteFlags(ctx command.Context, params *params.DeleteDNSParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["DNS"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
