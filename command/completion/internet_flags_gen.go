// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func InternetListCompleteFlags(ctx command.Context, params *params.ListInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Internet"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["Internet"].Commands["list"].Params["id"].CompleteFunc
	case "tags":
		comp = define.Resources["Internet"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["Internet"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["Internet"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["Internet"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetMonitorCompleteFlags(ctx command.Context, params *params.MonitorInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		comp = define.Resources["Internet"].Commands["monitor"].Params["start"].CompleteFunc
	case "end":
		comp = define.Resources["Internet"].Commands["monitor"].Params["end"].CompleteFunc
	case "key-format":
		comp = define.Resources["Internet"].Commands["monitor"].Params["key-format"].CompleteFunc
	case "id":
		comp = define.Resources["Internet"].Commands["monitor"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetUpdateBandwidthCompleteFlags(ctx command.Context, params *params.UpdateBandwidthInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "band-width":
		comp = define.Resources["Internet"].Commands["update-bandwidth"].Params["band-width"].CompleteFunc
	case "id":
		comp = define.Resources["Internet"].Commands["update-bandwidth"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetCreateCompleteFlags(ctx command.Context, params *params.CreateInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Internet"].Commands["create"].Params["nw-masklen"].CompleteFunc
	case "band-width":
		comp = define.Resources["Internet"].Commands["create"].Params["band-width"].CompleteFunc
	case "name":
		comp = define.Resources["Internet"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Internet"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Internet"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Internet"].Commands["create"].Params["icon-id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetReadCompleteFlags(ctx command.Context, params *params.ReadInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Internet"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetUpdateCompleteFlags(ctx command.Context, params *params.UpdateInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "band-width":
		comp = define.Resources["Internet"].Commands["update"].Params["band-width"].CompleteFunc
	case "name":
		comp = define.Resources["Internet"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Internet"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Internet"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Internet"].Commands["update"].Params["icon-id"].CompleteFunc
	case "id":
		comp = define.Resources["Internet"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func InternetDeleteCompleteFlags(ctx command.Context, params *params.DeleteInternetParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Internet"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
