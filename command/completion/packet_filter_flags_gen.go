// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func PacketFilterListCompleteFlags(ctx command.Context, params *params.ListPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["PacketFilter"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["list"].Params["id"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["PacketFilter"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["PacketFilter"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["PacketFilter"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterCreateCompleteFlags(ctx command.Context, params *params.CreatePacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["PacketFilter"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["PacketFilter"].Commands["create"].Params["description"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterReadCompleteFlags(ctx command.Context, params *params.ReadPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["PacketFilter"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterUpdateCompleteFlags(ctx command.Context, params *params.UpdatePacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["PacketFilter"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["PacketFilter"].Commands["update"].Params["description"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterDeleteCompleteFlags(ctx command.Context, params *params.DeletePacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["PacketFilter"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterRuleInfoCompleteFlags(ctx command.Context, params *params.RuleInfoPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["PacketFilter"].Commands["rule-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterRuleAddCompleteFlags(ctx command.Context, params *params.RuleAddPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["index"].CompleteFunc
	case "protocol":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["protocol"].CompleteFunc
	case "source-network":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["source-network"].CompleteFunc
	case "source-port":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["source-port"].CompleteFunc
	case "destination-port", "dest-port":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["destination-port"].CompleteFunc
	case "action":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["action"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["description"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["rule-add"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterRuleUpdateCompleteFlags(ctx command.Context, params *params.RuleUpdatePacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["index"].CompleteFunc
	case "protocol":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["protocol"].CompleteFunc
	case "source-network":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["source-network"].CompleteFunc
	case "source-port":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["source-port"].CompleteFunc
	case "destination-port", "dest-port":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["destination-port"].CompleteFunc
	case "action":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["action"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["description"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["rule-update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterRuleDeleteCompleteFlags(ctx command.Context, params *params.RuleDeletePacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["PacketFilter"].Commands["rule-delete"].Params["index"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["rule-delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterInterfaceConnectCompleteFlags(ctx command.Context, params *params.InterfaceConnectPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface-id":
		comp = define.Resources["PacketFilter"].Commands["interface-connect"].Params["interface-id"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["interface-connect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func PacketFilterInterfaceDisconnectCompleteFlags(ctx command.Context, params *params.InterfaceDisconnectPacketFilterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "interface-id":
		comp = define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["interface-id"].CompleteFunc
	case "id":
		comp = define.Resources["PacketFilter"].Commands["interface-disconnect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
