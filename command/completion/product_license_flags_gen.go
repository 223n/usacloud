// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ProductLicenseListCompleteFlags(ctx command.Context, params *params.ListProductLicenseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["ProductLicense"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["ProductLicense"].Commands["list"].Params["id"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["ProductLicense"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["ProductLicense"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["ProductLicense"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ProductLicenseReadCompleteFlags(ctx command.Context, params *params.ReadProductLicenseParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["ProductLicense"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
