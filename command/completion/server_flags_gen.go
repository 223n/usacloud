// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func ServerListCompleteFlags(ctx command.Context, params *params.ListServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Server"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["list"].Params["id"].CompleteFunc
	case "tags":
		comp = define.Resources["Server"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["Server"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["Server"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["Server"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerBuildCompleteFlags(ctx command.Context, params *params.BuildServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "core":
		comp = define.Resources["Server"].Commands["build"].Params["core"].CompleteFunc
	case "memory":
		comp = define.Resources["Server"].Commands["build"].Params["memory"].CompleteFunc
	case "disk-mode":
		comp = define.Resources["Server"].Commands["build"].Params["disk-mode"].CompleteFunc
	case "os-type":
		comp = define.Resources["Server"].Commands["build"].Params["os-type"].CompleteFunc
	case "disk-plan":
		comp = define.Resources["Server"].Commands["build"].Params["disk-plan"].CompleteFunc
	case "disk-connection":
		comp = define.Resources["Server"].Commands["build"].Params["disk-connection"].CompleteFunc
	case "disk-size":
		comp = define.Resources["Server"].Commands["build"].Params["disk-size"].CompleteFunc
	case "source-archive-id":
		comp = define.Resources["Server"].Commands["build"].Params["source-archive-id"].CompleteFunc
	case "source-disk-id":
		comp = define.Resources["Server"].Commands["build"].Params["source-disk-id"].CompleteFunc
	case "distant-from":
		comp = define.Resources["Server"].Commands["build"].Params["distant-from"].CompleteFunc
	case "disk-id":
		comp = define.Resources["Server"].Commands["build"].Params["disk-id"].CompleteFunc
	case "iso-image-id":
		comp = define.Resources["Server"].Commands["build"].Params["iso-image-id"].CompleteFunc
	case "network-mode":
		comp = define.Resources["Server"].Commands["build"].Params["network-mode"].CompleteFunc
	case "use-nic-virtio":
		comp = define.Resources["Server"].Commands["build"].Params["use-nic-virtio"].CompleteFunc
	case "packet-filter-id":
		comp = define.Resources["Server"].Commands["build"].Params["packet-filter-id"].CompleteFunc
	case "switch-id":
		comp = define.Resources["Server"].Commands["build"].Params["switch-id"].CompleteFunc
	case "hostname":
		comp = define.Resources["Server"].Commands["build"].Params["hostname"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["build"].Params["password"].CompleteFunc
	case "disable-password-auth", "disable-pw-auth":
		comp = define.Resources["Server"].Commands["build"].Params["disable-password-auth"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["Server"].Commands["build"].Params["ipaddress"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Server"].Commands["build"].Params["nw-masklen"].CompleteFunc
	case "default-route", "gateway":
		comp = define.Resources["Server"].Commands["build"].Params["default-route"].CompleteFunc
	case "startup-scripts", "notes":
		comp = define.Resources["Server"].Commands["build"].Params["startup-scripts"].CompleteFunc
	case "startup-script-ids", "note-ids":
		comp = define.Resources["Server"].Commands["build"].Params["startup-script-ids"].CompleteFunc
	case "startup-scripts-ephemeral":
		comp = define.Resources["Server"].Commands["build"].Params["startup-scripts-ephemeral"].CompleteFunc
	case "ssh-key-mode":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-mode"].CompleteFunc
	case "ssh-key-name":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-name"].CompleteFunc
	case "ssh-key-ids":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-ids"].CompleteFunc
	case "ssh-key-pass-phrase":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-pass-phrase"].CompleteFunc
	case "ssh-key-description":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-description"].CompleteFunc
	case "ssh-key-private-key-output":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-private-key-output"].CompleteFunc
	case "ssh-key-public-keys":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-public-keys"].CompleteFunc
	case "ssh-key-public-key-files":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-public-key-files"].CompleteFunc
	case "ssh-key-ephemeral":
		comp = define.Resources["Server"].Commands["build"].Params["ssh-key-ephemeral"].CompleteFunc
	case "name":
		comp = define.Resources["Server"].Commands["build"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Server"].Commands["build"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Server"].Commands["build"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Server"].Commands["build"].Params["icon-id"].CompleteFunc
	case "us-keyboard":
		comp = define.Resources["Server"].Commands["build"].Params["us-keyboard"].CompleteFunc
	case "disable-boot-after-create":
		comp = define.Resources["Server"].Commands["build"].Params["disable-boot-after-create"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerReadCompleteFlags(ctx command.Context, params *params.ReadServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerUpdateCompleteFlags(ctx command.Context, params *params.UpdateServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["Server"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Server"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Server"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Server"].Commands["update"].Params["icon-id"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDeleteCompleteFlags(ctx command.Context, params *params.DeleteServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "force", "f":
		comp = define.Resources["Server"].Commands["delete"].Params["force"].CompleteFunc
	case "without-disk":
		comp = define.Resources["Server"].Commands["delete"].Params["without-disk"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerPlanChangeCompleteFlags(ctx command.Context, params *params.PlanChangeServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "core":
		comp = define.Resources["Server"].Commands["plan-change"].Params["core"].CompleteFunc
	case "memory":
		comp = define.Resources["Server"].Commands["plan-change"].Params["memory"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["plan-change"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerBootCompleteFlags(ctx command.Context, params *params.BootServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["boot"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerShutdownCompleteFlags(ctx command.Context, params *params.ShutdownServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["shutdown"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["shutdown-force"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerResetCompleteFlags(ctx command.Context, params *params.ResetServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["reset"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["wait-for-boot"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["wait-for-down"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerSshCompleteFlags(ctx command.Context, params *params.SshServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		comp = define.Resources["Server"].Commands["ssh"].Params["key"].CompleteFunc
	case "user", "l":
		comp = define.Resources["Server"].Commands["ssh"].Params["user"].CompleteFunc
	case "port", "p":
		comp = define.Resources["Server"].Commands["ssh"].Params["port"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["ssh"].Params["password"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["ssh"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerSshExecCompleteFlags(ctx command.Context, params *params.SshExecServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		comp = define.Resources["Server"].Commands["ssh-exec"].Params["key"].CompleteFunc
	case "user", "l":
		comp = define.Resources["Server"].Commands["ssh-exec"].Params["user"].CompleteFunc
	case "port", "p":
		comp = define.Resources["Server"].Commands["ssh-exec"].Params["port"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["ssh-exec"].Params["password"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["ssh-exec"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerScpCompleteFlags(ctx command.Context, params *params.ScpServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "key", "i":
		comp = define.Resources["Server"].Commands["scp"].Params["key"].CompleteFunc
	case "recursive", "r":
		comp = define.Resources["Server"].Commands["scp"].Params["recursive"].CompleteFunc
	case "user", "l":
		comp = define.Resources["Server"].Commands["scp"].Params["user"].CompleteFunc
	case "port", "p":
		comp = define.Resources["Server"].Commands["scp"].Params["port"].CompleteFunc
	case "password":
		comp = define.Resources["Server"].Commands["scp"].Params["password"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncCompleteFlags(ctx command.Context, params *params.VncServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "wait-for-boot":
		comp = define.Resources["Server"].Commands["vnc"].Params["wait-for-boot"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["vnc"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncInfoCompleteFlags(ctx command.Context, params *params.VncInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "wait-for-boot":
		comp = define.Resources["Server"].Commands["vnc-info"].Params["wait-for-boot"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["vnc-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerVncSendCompleteFlags(ctx command.Context, params *params.VncSendServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "command", "c":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["command"].CompleteFunc
	case "command-file", "f":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["command-file"].CompleteFunc
	case "use-us-keyboard":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["use-us-keyboard"].CompleteFunc
	case "debug", "d":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["debug"].CompleteFunc
	case "wait-for-boot":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["wait-for-boot"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["vnc-send"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskInfoCompleteFlags(ctx command.Context, params *params.DiskInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["disk-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskConnectCompleteFlags(ctx command.Context, params *params.DiskConnectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disk-id":
		comp = define.Resources["Server"].Commands["disk-connect"].Params["disk-id"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["disk-connect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerDiskDisconnectCompleteFlags(ctx command.Context, params *params.DiskDisconnectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "disk-id":
		comp = define.Resources["Server"].Commands["disk-disconnect"].Params["disk-id"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["disk-disconnect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceInfoCompleteFlags(ctx command.Context, params *params.InterfaceInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["interface-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForInternetCompleteFlags(ctx command.Context, params *params.InterfaceAddForInternetServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "without-disk-edit":
		comp = define.Resources["Server"].Commands["interface-add-for-internet"].Params["without-disk-edit"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["interface-add-for-internet"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForRouterCompleteFlags(ctx command.Context, params *params.InterfaceAddForRouterServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["switch-id"].CompleteFunc
	case "without-disk-edit":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["without-disk-edit"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["ipaddress"].CompleteFunc
	case "default-route", "gateway":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["default-route"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["nw-masklen"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["interface-add-for-router"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddForSwitchCompleteFlags(ctx command.Context, params *params.InterfaceAddForSwitchServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "switch-id":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["switch-id"].CompleteFunc
	case "without-disk-edit":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["without-disk-edit"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["ipaddress"].CompleteFunc
	case "default-route", "gateway":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["default-route"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["nw-masklen"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["interface-add-for-switch"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerInterfaceAddDisconnectedCompleteFlags(ctx command.Context, params *params.InterfaceAddDisconnectedServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["interface-add-disconnected"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoInfoCompleteFlags(ctx command.Context, params *params.IsoInfoServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["iso-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoInsertCompleteFlags(ctx command.Context, params *params.IsoInsertServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "iso-image-id":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["iso-image-id"].CompleteFunc
	case "size":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["size"].CompleteFunc
	case "iso-file":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["iso-file"].CompleteFunc
	case "name":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["icon-id"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["iso-insert"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerIsoEjectCompleteFlags(ctx command.Context, params *params.IsoEjectServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["Server"].Commands["iso-eject"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorCpuCompleteFlags(ctx command.Context, params *params.MonitorCpuServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		comp = define.Resources["Server"].Commands["monitor-cpu"].Params["start"].CompleteFunc
	case "end":
		comp = define.Resources["Server"].Commands["monitor-cpu"].Params["end"].CompleteFunc
	case "key-format":
		comp = define.Resources["Server"].Commands["monitor-cpu"].Params["key-format"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["monitor-cpu"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorNicCompleteFlags(ctx command.Context, params *params.MonitorNicServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		comp = define.Resources["Server"].Commands["monitor-nic"].Params["start"].CompleteFunc
	case "end":
		comp = define.Resources["Server"].Commands["monitor-nic"].Params["end"].CompleteFunc
	case "index":
		comp = define.Resources["Server"].Commands["monitor-nic"].Params["index"].CompleteFunc
	case "key-format":
		comp = define.Resources["Server"].Commands["monitor-nic"].Params["key-format"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["monitor-nic"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func ServerMonitorDiskCompleteFlags(ctx command.Context, params *params.MonitorDiskServerParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "start":
		comp = define.Resources["Server"].Commands["monitor-disk"].Params["start"].CompleteFunc
	case "end":
		comp = define.Resources["Server"].Commands["monitor-disk"].Params["end"].CompleteFunc
	case "index":
		comp = define.Resources["Server"].Commands["monitor-disk"].Params["index"].CompleteFunc
	case "key-format":
		comp = define.Resources["Server"].Commands["monitor-disk"].Params["key-format"].CompleteFunc
	case "id":
		comp = define.Resources["Server"].Commands["monitor-disk"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
