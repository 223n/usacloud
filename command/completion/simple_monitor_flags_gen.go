// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func SimpleMonitorListCompleteFlags(ctx command.Context, params *params.ListSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["id"].CompleteFunc
	case "tags":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["SimpleMonitor"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorCreateCompleteFlags(ctx command.Context, params *params.CreateSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "target":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["target"].CompleteFunc
	case "protocol":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["protocol"].CompleteFunc
	case "port":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["port"].CompleteFunc
	case "delay-loop":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["delay-loop"].CompleteFunc
	case "enabled":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["enabled"].CompleteFunc
	case "host-header":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["host-header"].CompleteFunc
	case "path":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["path"].CompleteFunc
	case "response-code":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["response-code"].CompleteFunc
	case "dns-qname":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["dns-qname"].CompleteFunc
	case "dns-excepted":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["dns-excepted"].CompleteFunc
	case "notify-email":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["notify-email"].CompleteFunc
	case "email-type":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["email-type"].CompleteFunc
	case "slack-webhook":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["slack-webhook"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["SimpleMonitor"].Commands["create"].Params["assumeyes"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorReadCompleteFlags(ctx command.Context, params *params.ReadSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["SimpleMonitor"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorUpdateCompleteFlags(ctx command.Context, params *params.UpdateSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "protocol":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["protocol"].CompleteFunc
	case "port":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["port"].CompleteFunc
	case "delay-loop":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["delay-loop"].CompleteFunc
	case "enabled":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["enabled"].CompleteFunc
	case "host-header":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["host-header"].CompleteFunc
	case "path":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["path"].CompleteFunc
	case "response-code":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["response-code"].CompleteFunc
	case "dns_qname":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["dns_qname"].CompleteFunc
	case "dns_excepted":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["dns_excepted"].CompleteFunc
	case "notify-email":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["notify-email"].CompleteFunc
	case "email-type":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["email-type"].CompleteFunc
	case "slack-webhook":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["slack-webhook"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["SimpleMonitor"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SimpleMonitorDeleteCompleteFlags(ctx command.Context, params *params.DeleteSimpleMonitorParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["SimpleMonitor"].Commands["delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["SimpleMonitor"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
