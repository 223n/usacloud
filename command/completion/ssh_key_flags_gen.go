// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func SSHKeyListCompleteFlags(ctx command.Context, params *params.ListSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["SSHKey"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["SSHKey"].Commands["list"].Params["id"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["SSHKey"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["SSHKey"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["SSHKey"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SSHKeyCreateCompleteFlags(ctx command.Context, params *params.CreateSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "public-key":
		comp = define.Resources["SSHKey"].Commands["create"].Params["public-key"].CompleteFunc
	case "name":
		comp = define.Resources["SSHKey"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SSHKey"].Commands["create"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["SSHKey"].Commands["create"].Params["assumeyes"].CompleteFunc
	case "public-key-content":
		comp = define.Resources["SSHKey"].Commands["create"].Params["public-key-content"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SSHKeyReadCompleteFlags(ctx command.Context, params *params.ReadSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["SSHKey"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SSHKeyUpdateCompleteFlags(ctx command.Context, params *params.UpdateSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["SSHKey"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SSHKey"].Commands["update"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["SSHKey"].Commands["update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["SSHKey"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SSHKeyDeleteCompleteFlags(ctx command.Context, params *params.DeleteSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["SSHKey"].Commands["delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["SSHKey"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func SSHKeyGenerateCompleteFlags(ctx command.Context, params *params.GenerateSSHKeyParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "pass-phrase":
		comp = define.Resources["SSHKey"].Commands["generate"].Params["pass-phrase"].CompleteFunc
	case "name":
		comp = define.Resources["SSHKey"].Commands["generate"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["SSHKey"].Commands["generate"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["SSHKey"].Commands["generate"].Params["assumeyes"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
