// Code generated by 'github.com/sacloud/usacloud/tools/gen-command-completion'; DO NOT EDIT

package completion

import (
	"fmt"
	"github.com/sacloud/usacloud/command"
	"github.com/sacloud/usacloud/command/params"
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/schema"
)

func VPCRouterListCompleteFlags(ctx command.Context, params *params.ListVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "name":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["name"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["id"].CompleteFunc
	case "tags":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["tags"].CompleteFunc
	case "from", "offset":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["from"].CompleteFunc
	case "max", "limit":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["max"].CompleteFunc
	case "sort":
		comp = define.Resources["VPCRouter"].Commands["list"].Params["sort"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterCreateCompleteFlags(ctx command.Context, params *params.CreateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "plan":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["plan"].CompleteFunc
	case "switch-id":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].CompleteFunc
	case "vrid", "VRID":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["vrid"].CompleteFunc
	case "vip":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["vip"].CompleteFunc
	case "ipaddress1", "ip1":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].CompleteFunc
	case "ipaddress2", "ip2":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].CompleteFunc
	case "boot-after-create":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["boot-after-create"].CompleteFunc
	case "name":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["create"].Params["assumeyes"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterReadCompleteFlags(ctx command.Context, params *params.ReadVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["read"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUpdateCompleteFlags(ctx command.Context, params *params.UpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "syslog-host":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].CompleteFunc
	case "name":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["name"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["description"].CompleteFunc
	case "tags":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["tags"].CompleteFunc
	case "icon-id":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["update"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDeleteCompleteFlags(ctx command.Context, params *params.DeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "force", "f":
		comp = define.Resources["VPCRouter"].Commands["delete"].Params["force"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["delete"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterBootCompleteFlags(ctx command.Context, params *params.BootVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["boot"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["boot"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterShutdownCompleteFlags(ctx command.Context, params *params.ShutdownVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["shutdown"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["shutdown"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterShutdownForceCompleteFlags(ctx command.Context, params *params.ShutdownForceVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["shutdown-force"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["shutdown-force"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterResetCompleteFlags(ctx command.Context, params *params.ResetVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["reset"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["reset"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterWaitForBootCompleteFlags(ctx command.Context, params *params.WaitForBootVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["wait-for-boot"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterWaitForDownCompleteFlags(ctx command.Context, params *params.WaitForDownVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["wait-for-down"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceInfoCompleteFlags(ctx command.Context, params *params.InterfaceInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["interface-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceConnectCompleteFlags(ctx command.Context, params *params.InterfaceConnectVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["index"].CompleteFunc
	case "ipaddress", "ip", "vip":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].CompleteFunc
	case "with-reboot":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["with-reboot"].CompleteFunc
	case "ipaddress1", "ip1":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].CompleteFunc
	case "switch-id":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].CompleteFunc
	case "ipaddress2", "ip2":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["interface-connect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceUpdateCompleteFlags(ctx command.Context, params *params.InterfaceUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["index"].CompleteFunc
	case "ipaddress", "ip", "vip":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].CompleteFunc
	case "with-reboot":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["with-reboot"].CompleteFunc
	case "ipaddress1", "ip1":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].CompleteFunc
	case "switch-id":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].CompleteFunc
	case "ipaddress2", "ip2":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].CompleteFunc
	case "alias":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].CompleteFunc
	case "nw-masklen", "network-masklen":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["interface-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterInterfaceDisconnectCompleteFlags(ctx command.Context, params *params.InterfaceDisconnectVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["index"].CompleteFunc
	case "with-reboot":
		comp = define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["with-reboot"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatInfoCompleteFlags(ctx command.Context, params *params.StaticNatInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-nat-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatAddCompleteFlags(ctx command.Context, params *params.StaticNatAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "global", "global-ip", "global-address":
		comp = define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].CompleteFunc
	case "private", "private-ip", "private-address":
		comp = define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-nat-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-nat-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatUpdateCompleteFlags(ctx command.Context, params *params.StaticNatUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["index"].CompleteFunc
	case "global", "global-ip", "global-address":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].CompleteFunc
	case "private", "private-ip", "private-address":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-nat-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticNatDeleteCompleteFlags(ctx command.Context, params *params.StaticNatDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["static-nat-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-nat-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-nat-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingInfoCompleteFlags(ctx command.Context, params *params.PortForwardingInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingAddCompleteFlags(ctx command.Context, params *params.PortForwardingAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "protocol":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].CompleteFunc
	case "global-port":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].CompleteFunc
	case "private-ipaddress", "private-ip", "private-address":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].CompleteFunc
	case "private-port":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingUpdateCompleteFlags(ctx command.Context, params *params.PortForwardingUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["index"].CompleteFunc
	case "protocol":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].CompleteFunc
	case "global-port":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].CompleteFunc
	case "private-ipaddress", "private-ip", "private-address":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].CompleteFunc
	case "private-port":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPortForwardingDeleteCompleteFlags(ctx command.Context, params *params.PortForwardingDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["port-forwarding-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallInfoCompleteFlags(ctx command.Context, params *params.FirewallInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "direction":
		comp = define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["firewall-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallAddCompleteFlags(ctx command.Context, params *params.FirewallAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "direction":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].CompleteFunc
	case "protocol":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].CompleteFunc
	case "source-network":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].CompleteFunc
	case "source-port":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].CompleteFunc
	case "destination-network", "dest-network":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].CompleteFunc
	case "destination-port", "dest-port":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].CompleteFunc
	case "action":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].CompleteFunc
	case "enable-logging":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["enable-logging"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["firewall-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallUpdateCompleteFlags(ctx command.Context, params *params.FirewallUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "direction":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].CompleteFunc
	case "index":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["index"].CompleteFunc
	case "protocol":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].CompleteFunc
	case "source-network":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].CompleteFunc
	case "source-port":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].CompleteFunc
	case "destination-network", "dest-network":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].CompleteFunc
	case "destination-port", "dest-port":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].CompleteFunc
	case "action":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].CompleteFunc
	case "enable-logging":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["enable-logging"].CompleteFunc
	case "description", "desc":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["firewall-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterFirewallDeleteCompleteFlags(ctx command.Context, params *params.FirewallDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "direction":
		comp = define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].CompleteFunc
	case "index":
		comp = define.Resources["VPCRouter"].Commands["firewall-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["firewall-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["firewall-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerInfoCompleteFlags(ctx command.Context, params *params.DhcpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerAddCompleteFlags(ctx command.Context, params *params.DhcpServerAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["index"].CompleteFunc
	case "range-start":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].CompleteFunc
	case "range-stop", "range-end":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerUpdateCompleteFlags(ctx command.Context, params *params.DhcpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["index"].CompleteFunc
	case "range-start":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].CompleteFunc
	case "range-stop", "range-end":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpServerDeleteCompleteFlags(ctx command.Context, params *params.DhcpServerDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingInfoCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingAddCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "macaddress", "mac":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingUpdateCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["index"].CompleteFunc
	case "macaddress", "mac":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].CompleteFunc
	case "ipaddress", "ip":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterDhcpStaticMappingDeleteCompleteFlags(ctx command.Context, params *params.DhcpStaticMappingDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["dhcp-static-mapping-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPptpServerInfoCompleteFlags(ctx command.Context, params *params.PptpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterPptpServerUpdateCompleteFlags(ctx command.Context, params *params.PptpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "enabled":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["enabled"].CompleteFunc
	case "range-start":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].CompleteFunc
	case "range-stop", "range-end":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterL2tpServerInfoCompleteFlags(ctx command.Context, params *params.L2tpServerInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterL2tpServerUpdateCompleteFlags(ctx command.Context, params *params.L2tpServerUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "enabled":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["enabled"].CompleteFunc
	case "range-start":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].CompleteFunc
	case "range-stop", "range-end":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].CompleteFunc
	case "pre-shared-secret":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserInfoCompleteFlags(ctx command.Context, params *params.UserInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["user-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserAddCompleteFlags(ctx command.Context, params *params.UserAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "username", "user":
		comp = define.Resources["VPCRouter"].Commands["user-add"].Params["username"].CompleteFunc
	case "password", "pass":
		comp = define.Resources["VPCRouter"].Commands["user-add"].Params["password"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["user-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["user-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserUpdateCompleteFlags(ctx command.Context, params *params.UserUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["user-update"].Params["index"].CompleteFunc
	case "username", "user":
		comp = define.Resources["VPCRouter"].Commands["user-update"].Params["username"].CompleteFunc
	case "password", "pass":
		comp = define.Resources["VPCRouter"].Commands["user-update"].Params["password"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["user-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["user-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterUserDeleteCompleteFlags(ctx command.Context, params *params.UserDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["user-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["user-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["user-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnInfoCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnAddCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "peer":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].CompleteFunc
	case "remote-id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["remote-id"].CompleteFunc
	case "pre-shared-secret":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].CompleteFunc
	case "routes":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].CompleteFunc
	case "local-prefix":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnUpdateCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["index"].CompleteFunc
	case "peer":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].CompleteFunc
	case "remote-id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["remote-id"].CompleteFunc
	case "pre-shared-secret":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].CompleteFunc
	case "routes":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].CompleteFunc
	case "local-prefix":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterSiteToSiteVpnDeleteCompleteFlags(ctx command.Context, params *params.SiteToSiteVpnDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["site-to-site-vpn-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteInfoCompleteFlags(ctx command.Context, params *params.StaticRouteInfoVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-route-info"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteAddCompleteFlags(ctx command.Context, params *params.StaticRouteAddVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "prefix":
		comp = define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].CompleteFunc
	case "next-hop":
		comp = define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-route-add"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-route-add"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteUpdateCompleteFlags(ctx command.Context, params *params.StaticRouteUpdateVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["static-route-update"].Params["index"].CompleteFunc
	case "prefix":
		comp = define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].CompleteFunc
	case "next-hop":
		comp = define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-route-update"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-route-update"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterStaticRouteDeleteCompleteFlags(ctx command.Context, params *params.StaticRouteDeleteVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["static-route-delete"].Params["index"].CompleteFunc
	case "assumeyes", "y":
		comp = define.Resources["VPCRouter"].Commands["static-route-delete"].Params["assumeyes"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["static-route-delete"].Params["id"].CompleteFunc
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}

func VPCRouterMonitorCompleteFlags(ctx command.Context, params *params.MonitorVPCRouterParam, flagName string, currentValue string) {
	var comp schema.CompletionFunc

	switch flagName {
	case "index":
		comp = define.Resources["VPCRouter"].Commands["monitor"].Params["index"].CompleteFunc
	case "start":
		comp = define.Resources["VPCRouter"].Commands["monitor"].Params["start"].CompleteFunc
	case "end":
		comp = define.Resources["VPCRouter"].Commands["monitor"].Params["end"].CompleteFunc
	case "key-format":
		comp = define.Resources["VPCRouter"].Commands["monitor"].Params["key-format"].CompleteFunc
	case "id":
		comp = define.Resources["VPCRouter"].Commands["monitor"].Params["id"].CompleteFunc
	case "output-type", "out":
		comp = schema.CompleteInStrValues("json", "csv", "tsv")
	}

	if comp != nil {
		words := comp(ctx, currentValue)
		for _, w := range words {
			fmt.Println(w)
		}
	}
}
