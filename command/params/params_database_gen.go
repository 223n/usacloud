// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListDatabaseParam is input parameters for the sacloud API
type ListDatabaseParam struct {
	Name              []string `json:"name"`
	Id                []int64  `json:"id"`
	Tags              []string `json:"tags"`
	From              int      `json:"from"`
	Max               int      `json:"max"`
	Sort              []string `json:"sort"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
}

// NewListDatabaseParam return new ListDatabaseParam
func NewListDatabaseParam() *ListDatabaseParam {
	return &ListDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []int64{0}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *ListDatabaseParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ListDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ListDatabaseParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDatabaseParam) GetName() []string {
	return p.Name
}
func (p *ListDatabaseParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListDatabaseParam) GetId() []int64 {
	return p.Id
}
func (p *ListDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *ListDatabaseParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDatabaseParam) GetFrom() int {
	return p.From
}
func (p *ListDatabaseParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDatabaseParam) GetMax() int {
	return p.Max
}
func (p *ListDatabaseParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDatabaseParam) GetSort() []string {
	return p.Sort
}
func (p *ListDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *ListDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *ListDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateDatabaseParam is input parameters for the sacloud API
type CreateDatabaseParam struct {
	SwitchId          int64    `json:"switch-id"`
	Plan              int      `json:"plan"`
	Database          string   `json:"database"`
	Username          string   `json:"username"`
	Password          string   `json:"password"`
	SourceNetworks    []string `json:"source-networks"`
	EnableWebUi       bool     `json:"enable-web-ui"`
	BackupTime        string   `json:"backup-time"`
	Port              int      `json:"port"`
	Ipaddress1        string   `json:"ipaddress1"`
	NwMaskLen         int      `json:"nw-mask-len"`
	DefaultRoute      string   `json:"default-route"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
}

// NewCreateDatabaseParam return new CreateDatabaseParam
func NewCreateDatabaseParam() *CreateDatabaseParam {
	return &CreateDatabaseParam{

		Plan: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.SwitchId) {
		p.SwitchId = 0
	}
	if isEmpty(p.Plan) {
		p.Plan = 0
	}
	if isEmpty(p.Database) {
		p.Database = ""
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if isEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if isEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *CreateDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["database"].ValidateFunc
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *CreateDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateDatabaseParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *CreateDatabaseParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *CreateDatabaseParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateDatabaseParam) GetPlan() int {
	return p.Plan
}
func (p *CreateDatabaseParam) SetDatabase(v string) {
	p.Database = v
}

func (p *CreateDatabaseParam) GetDatabase() string {
	return p.Database
}
func (p *CreateDatabaseParam) SetUsername(v string) {
	p.Username = v
}

func (p *CreateDatabaseParam) GetUsername() string {
	return p.Username
}
func (p *CreateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *CreateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *CreateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *CreateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *CreateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *CreateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *CreateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *CreateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *CreateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateDatabaseParam) GetPort() int {
	return p.Port
}
func (p *CreateDatabaseParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateDatabaseParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateDatabaseParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateDatabaseParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateDatabaseParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateDatabaseParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDatabaseParam) GetName() string {
	return p.Name
}
func (p *CreateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *CreateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDatabaseParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateDatabaseParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *CreateDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadDatabaseParam is input parameters for the sacloud API
type ReadDatabaseParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewReadDatabaseParam return new ReadDatabaseParam
func NewReadDatabaseParam() *ReadDatabaseParam {
	return &ReadDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ReadDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ReadDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ReadDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *ReadDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *ReadDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadDatabaseParam) GetId() int64 {
	return p.Id
}

// UpdateDatabaseParam is input parameters for the sacloud API
type UpdateDatabaseParam struct {
	Password          string   `json:"password"`
	Port              int      `json:"port"`
	SourceNetworks    []string `json:"source-networks"`
	EnableWebUi       bool     `json:"enable-web-ui"`
	BackupTime        string   `json:"backup-time"`
	Selector          []string `json:"selector"`
	Name              string   `json:"name"`
	Description       string   `json:"description"`
	Tags              []string `json:"tags"`
	IconId            int64    `json:"icon-id"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewUpdateDatabaseParam return new UpdateDatabaseParam
func NewUpdateDatabaseParam() *UpdateDatabaseParam {
	return &UpdateDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if isEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if isEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *UpdateDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Database"].Commands["update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *UpdateDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *UpdateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *UpdateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateDatabaseParam) GetPort() int {
	return p.Port
}
func (p *UpdateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *UpdateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *UpdateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *UpdateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *UpdateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *UpdateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *UpdateDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *UpdateDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *UpdateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateDatabaseParam) GetName() string {
	return p.Name
}
func (p *UpdateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDatabaseParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateDatabaseParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateDatabaseParam) GetId() int64 {
	return p.Id
}

// DeleteDatabaseParam is input parameters for the sacloud API
type DeleteDatabaseParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Force             bool     `json:"force"`
	Id                int64    `json:"id"`
}

// NewDeleteDatabaseParam return new DeleteDatabaseParam
func NewDeleteDatabaseParam() *DeleteDatabaseParam {
	return &DeleteDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DeleteDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *DeleteDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *DeleteDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *DeleteDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDatabaseParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteDatabaseParam) GetForce() bool {
	return p.Force
}
func (p *DeleteDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteDatabaseParam) GetId() int64 {
	return p.Id
}

// BootDatabaseParam is input parameters for the sacloud API
type BootDatabaseParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewBootDatabaseParam return new BootDatabaseParam
func NewBootDatabaseParam() *BootDatabaseParam {
	return &BootDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BootDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BootDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BootDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BootDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *BootDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BootDatabaseParam) GetId() int64 {
	return p.Id
}

// ShutdownDatabaseParam is input parameters for the sacloud API
type ShutdownDatabaseParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewShutdownDatabaseParam return new ShutdownDatabaseParam
func NewShutdownDatabaseParam() *ShutdownDatabaseParam {
	return &ShutdownDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownDatabaseParam) GetId() int64 {
	return p.Id
}

// ShutdownForceDatabaseParam is input parameters for the sacloud API
type ShutdownForceDatabaseParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewShutdownForceDatabaseParam return new ShutdownForceDatabaseParam
func NewShutdownForceDatabaseParam() *ShutdownForceDatabaseParam {
	return &ShutdownForceDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownForceDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownForceDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownForceDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ShutdownForceDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *ShutdownForceDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownForceDatabaseParam) GetId() int64 {
	return p.Id
}

// ResetDatabaseParam is input parameters for the sacloud API
type ResetDatabaseParam struct {
	Selector          []string `json:"selector"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewResetDatabaseParam return new ResetDatabaseParam
func NewResetDatabaseParam() *ResetDatabaseParam {
	return &ResetDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ResetDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ResetDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ResetDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *ResetDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *ResetDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ResetDatabaseParam) GetId() int64 {
	return p.Id
}

// WaitForBootDatabaseParam is input parameters for the sacloud API
type WaitForBootDatabaseParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewWaitForBootDatabaseParam return new WaitForBootDatabaseParam
func NewWaitForBootDatabaseParam() *WaitForBootDatabaseParam {
	return &WaitForBootDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForBootDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForBootDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForBootDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForBootDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForBootDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForBootDatabaseParam) GetId() int64 {
	return p.Id
}

// WaitForDownDatabaseParam is input parameters for the sacloud API
type WaitForDownDatabaseParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewWaitForDownDatabaseParam return new WaitForDownDatabaseParam
func NewWaitForDownDatabaseParam() *WaitForDownDatabaseParam {
	return &WaitForDownDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForDownDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForDownDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForDownDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *WaitForDownDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *WaitForDownDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForDownDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupInfoDatabaseParam is input parameters for the sacloud API
type BackupInfoDatabaseParam struct {
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupInfoDatabaseParam return new BackupInfoDatabaseParam
func NewBackupInfoDatabaseParam() *BackupInfoDatabaseParam {
	return &BackupInfoDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupInfoDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupInfoDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupInfoDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupInfoDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-info"]
}

func (p *BackupInfoDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupInfoDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupInfoDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupInfoDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupInfoDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupInfoDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *BackupInfoDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *BackupInfoDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupInfoDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupInfoDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupInfoDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupInfoDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupInfoDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupInfoDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupInfoDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupInfoDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupInfoDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupInfoDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupInfoDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupInfoDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupInfoDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupInfoDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupInfoDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupInfoDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupInfoDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupCreateDatabaseParam is input parameters for the sacloud API
type BackupCreateDatabaseParam struct {
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupCreateDatabaseParam return new BackupCreateDatabaseParam
func NewBackupCreateDatabaseParam() *BackupCreateDatabaseParam {
	return &BackupCreateDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupCreateDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupCreateDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupCreateDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupCreateDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-create"]
}

func (p *BackupCreateDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupCreateDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupCreateDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupCreateDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupCreateDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupCreateDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BackupCreateDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BackupCreateDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupCreateDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupCreateDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupCreateDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupCreateDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupCreateDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupCreateDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupCreateDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupCreateDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupCreateDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupCreateDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupCreateDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupCreateDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupCreateDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupCreateDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupCreateDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupCreateDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupCreateDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupRestoreDatabaseParam is input parameters for the sacloud API
type BackupRestoreDatabaseParam struct {
	Index             int      `json:"index"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupRestoreDatabaseParam return new BackupRestoreDatabaseParam
func NewBackupRestoreDatabaseParam() *BackupRestoreDatabaseParam {
	return &BackupRestoreDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupRestoreDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupRestoreDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-restore"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupRestoreDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupRestoreDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-restore"]
}

func (p *BackupRestoreDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupRestoreDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupRestoreDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupRestoreDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupRestoreDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupRestoreDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupRestoreDatabaseParam) GetIndex() int {
	return p.Index
}
func (p *BackupRestoreDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BackupRestoreDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BackupRestoreDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupRestoreDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupRestoreDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupRestoreDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupRestoreDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupRestoreDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupRestoreDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupRestoreDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupRestoreDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupRestoreDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupRestoreDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupRestoreDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupRestoreDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupRestoreDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupRestoreDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupRestoreDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupRestoreDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupRestoreDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupLockDatabaseParam is input parameters for the sacloud API
type BackupLockDatabaseParam struct {
	Index             int      `json:"index"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupLockDatabaseParam return new BackupLockDatabaseParam
func NewBackupLockDatabaseParam() *BackupLockDatabaseParam {
	return &BackupLockDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupLockDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupLockDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-lock"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupLockDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupLockDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-lock"]
}

func (p *BackupLockDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupLockDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupLockDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupLockDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupLockDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupLockDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupLockDatabaseParam) GetIndex() int {
	return p.Index
}
func (p *BackupLockDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BackupLockDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BackupLockDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupLockDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupLockDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupLockDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupLockDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupLockDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupLockDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupLockDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupLockDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupLockDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupLockDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupLockDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupLockDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupLockDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupLockDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupLockDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupLockDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupLockDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupUnlockDatabaseParam is input parameters for the sacloud API
type BackupUnlockDatabaseParam struct {
	Index             int      `json:"index"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupUnlockDatabaseParam return new BackupUnlockDatabaseParam
func NewBackupUnlockDatabaseParam() *BackupUnlockDatabaseParam {
	return &BackupUnlockDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupUnlockDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupUnlockDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-unlock"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupUnlockDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupUnlockDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-unlock"]
}

func (p *BackupUnlockDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupUnlockDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupUnlockDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupUnlockDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupUnlockDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupUnlockDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupUnlockDatabaseParam) GetIndex() int {
	return p.Index
}
func (p *BackupUnlockDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BackupUnlockDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BackupUnlockDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupUnlockDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupUnlockDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupUnlockDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupUnlockDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupUnlockDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupUnlockDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupUnlockDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupUnlockDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupUnlockDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupUnlockDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupUnlockDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupUnlockDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupUnlockDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupUnlockDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupUnlockDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupUnlockDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupUnlockDatabaseParam) GetId() int64 {
	return p.Id
}

// BackupRemoveDatabaseParam is input parameters for the sacloud API
type BackupRemoveDatabaseParam struct {
	Index             int      `json:"index"`
	Assumeyes         bool     `json:"assumeyes"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	OutputType        string   `json:"output-type"`
	Column            []string `json:"column"`
	Quiet             bool     `json:"quiet"`
	Format            string   `json:"format"`
	FormatFile        string   `json:"format-file"`
	Id                int64    `json:"id"`
}

// NewBackupRemoveDatabaseParam return new BackupRemoveDatabaseParam
func NewBackupRemoveDatabaseParam() *BackupRemoveDatabaseParam {
	return &BackupRemoveDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BackupRemoveDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Index) {
		p.Index = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BackupRemoveDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["backup-remove"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BackupRemoveDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BackupRemoveDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["backup-remove"]
}

func (p *BackupRemoveDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BackupRemoveDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BackupRemoveDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BackupRemoveDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BackupRemoveDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BackupRemoveDatabaseParam) SetIndex(v int) {
	p.Index = v
}

func (p *BackupRemoveDatabaseParam) GetIndex() int {
	return p.Index
}
func (p *BackupRemoveDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BackupRemoveDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BackupRemoveDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BackupRemoveDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BackupRemoveDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BackupRemoveDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BackupRemoveDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BackupRemoveDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BackupRemoveDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *BackupRemoveDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *BackupRemoveDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *BackupRemoveDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *BackupRemoveDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *BackupRemoveDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *BackupRemoveDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *BackupRemoveDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *BackupRemoveDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *BackupRemoveDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *BackupRemoveDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BackupRemoveDatabaseParam) GetId() int64 {
	return p.Id
}

// LogsDatabaseParam is input parameters for the sacloud API
type LogsDatabaseParam struct {
	LogName           string   `json:"log-name"`
	Follow            bool     `json:"follow"`
	RefreshInterval   int64    `json:"refresh-interval"`
	ListLogNames      bool     `json:"list-log-names"`
	Selector          []string `json:"selector"`
	ParamTemplate     string   `json:"param-template"`
	ParamTemplateFile string   `json:"param-template-file"`
	GenerateSkeleton  bool     `json:"generate-skeleton"`
	Id                int64    `json:"id"`
}

// NewLogsDatabaseParam return new LogsDatabaseParam
func NewLogsDatabaseParam() *LogsDatabaseParam {
	return &LogsDatabaseParam{

		LogName:         "all",
		RefreshInterval: 3,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *LogsDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.LogName) {
		p.LogName = ""
	}
	if isEmpty(p.Follow) {
		p.Follow = false
	}
	if isEmpty(p.RefreshInterval) {
		p.RefreshInterval = 0
	}
	if isEmpty(p.ListLogNames) {
		p.ListLogNames = false
	}
	if isEmpty(p.Selector) {
		p.Selector = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *LogsDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Database"].Commands["logs"].Params["refresh-interval"].ValidateFunc
		errs := validator("--refresh-interval", p.RefreshInterval)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *LogsDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *LogsDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["logs"]
}

func (p *LogsDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *LogsDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *LogsDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *LogsDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *LogsDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *LogsDatabaseParam) SetLogName(v string) {
	p.LogName = v
}

func (p *LogsDatabaseParam) GetLogName() string {
	return p.LogName
}
func (p *LogsDatabaseParam) SetFollow(v bool) {
	p.Follow = v
}

func (p *LogsDatabaseParam) GetFollow() bool {
	return p.Follow
}
func (p *LogsDatabaseParam) SetRefreshInterval(v int64) {
	p.RefreshInterval = v
}

func (p *LogsDatabaseParam) GetRefreshInterval() int64 {
	return p.RefreshInterval
}
func (p *LogsDatabaseParam) SetListLogNames(v bool) {
	p.ListLogNames = v
}

func (p *LogsDatabaseParam) GetListLogNames() bool {
	return p.ListLogNames
}
func (p *LogsDatabaseParam) SetSelector(v []string) {
	p.Selector = v
}

func (p *LogsDatabaseParam) GetSelector() []string {
	return p.Selector
}
func (p *LogsDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *LogsDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *LogsDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *LogsDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *LogsDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *LogsDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *LogsDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *LogsDatabaseParam) GetId() int64 {
	return p.Id
}
