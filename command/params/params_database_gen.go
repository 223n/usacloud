// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListDatabaseParam is input parameters for the sacloud API
type ListDatabaseParam struct {
	Name              []string
	Id                []int64
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewListDatabaseParam return new ListDatabaseParam
func NewListDatabaseParam() *ListDatabaseParam {
	return &ListDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []int64{0}
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *ListDatabaseParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ListDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ListDatabaseParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDatabaseParam) GetName() []string {
	return p.Name
}
func (p *ListDatabaseParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListDatabaseParam) GetId() []int64 {
	return p.Id
}
func (p *ListDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *ListDatabaseParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDatabaseParam) GetFrom() int {
	return p.From
}
func (p *ListDatabaseParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDatabaseParam) GetMax() int {
	return p.Max
}
func (p *ListDatabaseParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDatabaseParam) GetSort() []string {
	return p.Sort
}
func (p *ListDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *ListDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *ListDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateDatabaseParam is input parameters for the sacloud API
type CreateDatabaseParam struct {
	SwitchId          int64
	Plan              int
	Database          string
	Username          string
	Password          string
	SourceNetworks    []string
	EnableWebUi       bool
	BackupTime        string
	Port              int
	Ipaddress1        string
	NwMaskLen         int
	DefaultRoute      string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewCreateDatabaseParam return new CreateDatabaseParam
func NewCreateDatabaseParam() *CreateDatabaseParam {
	return &CreateDatabaseParam{

		Plan: 10,
	}
}

// FillValueToSkeleton fill values to empty fields
func (p *CreateDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.SwitchId) {
		p.SwitchId = 0
	}
	if isEmpty(p.Plan) {
		p.Plan = 0
	}
	if isEmpty(p.Database) {
		p.Database = ""
	}
	if isEmpty(p.Username) {
		p.Username = ""
	}
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if isEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if isEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.Ipaddress1) {
		p.Ipaddress1 = ""
	}
	if isEmpty(p.NwMaskLen) {
		p.NwMaskLen = 0
	}
	if isEmpty(p.DefaultRoute) {
		p.DefaultRoute = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *CreateDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["database"].ValidateFunc
		errs := validator("--database", p.Database)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["nw-mask-len"].ValidateFunc
		errs := validator("--nw-mask-len", p.NwMaskLen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["default-route"].ValidateFunc
		errs := validator("--default-route", p.DefaultRoute)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *CreateDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateDatabaseParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *CreateDatabaseParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *CreateDatabaseParam) SetPlan(v int) {
	p.Plan = v
}

func (p *CreateDatabaseParam) GetPlan() int {
	return p.Plan
}
func (p *CreateDatabaseParam) SetDatabase(v string) {
	p.Database = v
}

func (p *CreateDatabaseParam) GetDatabase() string {
	return p.Database
}
func (p *CreateDatabaseParam) SetUsername(v string) {
	p.Username = v
}

func (p *CreateDatabaseParam) GetUsername() string {
	return p.Username
}
func (p *CreateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *CreateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *CreateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *CreateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *CreateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *CreateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *CreateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *CreateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *CreateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateDatabaseParam) GetPort() int {
	return p.Port
}
func (p *CreateDatabaseParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateDatabaseParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateDatabaseParam) SetNwMaskLen(v int) {
	p.NwMaskLen = v
}

func (p *CreateDatabaseParam) GetNwMaskLen() int {
	return p.NwMaskLen
}
func (p *CreateDatabaseParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *CreateDatabaseParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *CreateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDatabaseParam) GetName() string {
	return p.Name
}
func (p *CreateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *CreateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDatabaseParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateDatabaseParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *CreateDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *CreateDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *CreateDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadDatabaseParam is input parameters for the sacloud API
type ReadDatabaseParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewReadDatabaseParam return new ReadDatabaseParam
func NewReadDatabaseParam() *ReadDatabaseParam {
	return &ReadDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ReadDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ReadDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *ReadDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadDatabaseParam) GetId() int64 {
	return p.Id
}

// UpdateDatabaseParam is input parameters for the sacloud API
type UpdateDatabaseParam struct {
	Password          string
	Port              int
	SourceNetworks    []string
	EnableWebUi       bool
	BackupTime        string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewUpdateDatabaseParam return new UpdateDatabaseParam
func NewUpdateDatabaseParam() *UpdateDatabaseParam {
	return &UpdateDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *UpdateDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Password) {
		p.Password = ""
	}
	if isEmpty(p.Port) {
		p.Port = 0
	}
	if isEmpty(p.SourceNetworks) {
		p.SourceNetworks = []string{""}
	}
	if isEmpty(p.EnableWebUi) {
		p.EnableWebUi = false
	}
	if isEmpty(p.BackupTime) {
		p.BackupTime = ""
	}
	if isEmpty(p.Name) {
		p.Name = ""
	}
	if isEmpty(p.Description) {
		p.Description = ""
	}
	if isEmpty(p.Tags) {
		p.Tags = []string{""}
	}
	if isEmpty(p.IconId) {
		p.IconId = 0
	}
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *UpdateDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Database"].Commands["update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["source-networks"].ValidateFunc
		errs := validator("--source-networks", p.SourceNetworks)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["backup-time"].ValidateFunc
		errs := validator("--backup-time", p.BackupTime)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Database"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *UpdateDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateDatabaseParam) SetPassword(v string) {
	p.Password = v
}

func (p *UpdateDatabaseParam) GetPassword() string {
	return p.Password
}
func (p *UpdateDatabaseParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateDatabaseParam) GetPort() int {
	return p.Port
}
func (p *UpdateDatabaseParam) SetSourceNetworks(v []string) {
	p.SourceNetworks = v
}

func (p *UpdateDatabaseParam) GetSourceNetworks() []string {
	return p.SourceNetworks
}
func (p *UpdateDatabaseParam) SetEnableWebUi(v bool) {
	p.EnableWebUi = v
}

func (p *UpdateDatabaseParam) GetEnableWebUi() bool {
	return p.EnableWebUi
}
func (p *UpdateDatabaseParam) SetBackupTime(v string) {
	p.BackupTime = v
}

func (p *UpdateDatabaseParam) GetBackupTime() string {
	return p.BackupTime
}
func (p *UpdateDatabaseParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateDatabaseParam) GetName() string {
	return p.Name
}
func (p *UpdateDatabaseParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDatabaseParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDatabaseParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDatabaseParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDatabaseParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateDatabaseParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *UpdateDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *UpdateDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateDatabaseParam) GetId() int64 {
	return p.Id
}

// DeleteDatabaseParam is input parameters for the sacloud API
type DeleteDatabaseParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Force             bool
	Id                int64
}

// NewDeleteDatabaseParam return new DeleteDatabaseParam
func NewDeleteDatabaseParam() *DeleteDatabaseParam {
	return &DeleteDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *DeleteDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Force) {
		p.Force = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *DeleteDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *DeleteDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *DeleteDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *DeleteDatabaseParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDatabaseParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDatabaseParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDatabaseParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDatabaseParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDatabaseParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDatabaseParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDatabaseParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDatabaseParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDatabaseParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDatabaseParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteDatabaseParam) GetForce() bool {
	return p.Force
}
func (p *DeleteDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteDatabaseParam) GetId() int64 {
	return p.Id
}

// BootDatabaseParam is input parameters for the sacloud API
type BootDatabaseParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewBootDatabaseParam return new BootDatabaseParam
func NewBootDatabaseParam() *BootDatabaseParam {
	return &BootDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *BootDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *BootDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *BootDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *BootDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *BootDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *BootDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *BootDatabaseParam) GetId() int64 {
	return p.Id
}

// ShutdownDatabaseParam is input parameters for the sacloud API
type ShutdownDatabaseParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewShutdownDatabaseParam return new ShutdownDatabaseParam
func NewShutdownDatabaseParam() *ShutdownDatabaseParam {
	return &ShutdownDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownDatabaseParam) GetId() int64 {
	return p.Id
}

// ShutdownForceDatabaseParam is input parameters for the sacloud API
type ShutdownForceDatabaseParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewShutdownForceDatabaseParam return new ShutdownForceDatabaseParam
func NewShutdownForceDatabaseParam() *ShutdownForceDatabaseParam {
	return &ShutdownForceDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ShutdownForceDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ShutdownForceDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ShutdownForceDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownForceDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ShutdownForceDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ShutdownForceDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownForceDatabaseParam) GetId() int64 {
	return p.Id
}

// ResetDatabaseParam is input parameters for the sacloud API
type ResetDatabaseParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewResetDatabaseParam return new ResetDatabaseParam
func NewResetDatabaseParam() *ResetDatabaseParam {
	return &ResetDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ResetDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ResetDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *ResetDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *ResetDatabaseParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetDatabaseParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ResetDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ResetDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *ResetDatabaseParam) GetId() int64 {
	return p.Id
}

// WaitForBootDatabaseParam is input parameters for the sacloud API
type WaitForBootDatabaseParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewWaitForBootDatabaseParam return new WaitForBootDatabaseParam
func NewWaitForBootDatabaseParam() *WaitForBootDatabaseParam {
	return &WaitForBootDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForBootDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForBootDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForBootDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForBootDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForBootDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForBootDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForBootDatabaseParam) GetId() int64 {
	return p.Id
}

// WaitForDownDatabaseParam is input parameters for the sacloud API
type WaitForDownDatabaseParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	Id                int64
}

// NewWaitForDownDatabaseParam return new WaitForDownDatabaseParam
func NewWaitForDownDatabaseParam() *WaitForDownDatabaseParam {
	return &WaitForDownDatabaseParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *WaitForDownDatabaseParam) FillValueToSkeleton() {
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *WaitForDownDatabaseParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownDatabaseParam) GetResourceDef() *schema.Resource {
	return define.Resources["Database"]
}

func (p *WaitForDownDatabaseParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownDatabaseParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownDatabaseParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownDatabaseParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownDatabaseParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownDatabaseParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForDownDatabaseParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownDatabaseParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownDatabaseParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownDatabaseParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownDatabaseParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *WaitForDownDatabaseParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *WaitForDownDatabaseParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForDownDatabaseParam) GetId() int64 {
	return p.Id
}
