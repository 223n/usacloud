// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListDiskParam is input parameters for the sacloud API
type ListDiskParam struct {
	Name              []string
	Id                []int64
	Scope             string
	Tags              []string
	SourceArchiveId   int64
	SourceDiskId      int64
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewListDiskParam return new ListDiskParam
func NewListDiskParam() *ListDiskParam {
	return &ListDiskParam{}
}

// Validate checks current values in model
func (p *ListDiskParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["list"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["list"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ListDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ListDiskParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDiskParam) GetName() []string {
	return p.Name
}
func (p *ListDiskParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListDiskParam) GetId() []int64 {
	return p.Id
}
func (p *ListDiskParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListDiskParam) GetScope() string {
	return p.Scope
}
func (p *ListDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDiskParam) GetTags() []string {
	return p.Tags
}
func (p *ListDiskParam) SetSourceArchiveId(v int64) {
	p.SourceArchiveId = v
}

func (p *ListDiskParam) GetSourceArchiveId() int64 {
	return p.SourceArchiveId
}
func (p *ListDiskParam) SetSourceDiskId(v int64) {
	p.SourceDiskId = v
}

func (p *ListDiskParam) GetSourceDiskId() int64 {
	return p.SourceDiskId
}
func (p *ListDiskParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDiskParam) GetFrom() int {
	return p.From
}
func (p *ListDiskParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDiskParam) GetMax() int {
	return p.Max
}
func (p *ListDiskParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDiskParam) GetSort() []string {
	return p.Sort
}
func (p *ListDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ListDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDiskParam) GetFormat() string {
	return p.Format
}
func (p *ListDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDiskParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateDiskParam is input parameters for the sacloud API
type CreateDiskParam struct {
	Plan              string
	Connection        string
	SourceArchiveId   int64
	SourceDiskId      int64
	Size              int
	DistantFrom       []int64
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewCreateDiskParam return new CreateDiskParam
func NewCreateDiskParam() *CreateDiskParam {
	return &CreateDiskParam{

		Plan: "ssd",

		Connection: "virtio",

		Size: 20,
	}
}

// Validate checks current values in model
func (p *CreateDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["connection"].ValidateFunc
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--source-archive-id", p.SourceArchiveId, map[string]interface{}{

			"--source-disk-id": p.SourceDiskId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--source-disk-id", p.SourceDiskId, map[string]interface{}{

			"--source-archive-id": p.SourceArchiveId,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["size"].ValidateFunc
		errs := validator("--size", p.Size)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *CreateDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateDiskParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateDiskParam) GetPlan() string {
	return p.Plan
}
func (p *CreateDiskParam) SetConnection(v string) {
	p.Connection = v
}

func (p *CreateDiskParam) GetConnection() string {
	return p.Connection
}
func (p *CreateDiskParam) SetSourceArchiveId(v int64) {
	p.SourceArchiveId = v
}

func (p *CreateDiskParam) GetSourceArchiveId() int64 {
	return p.SourceArchiveId
}
func (p *CreateDiskParam) SetSourceDiskId(v int64) {
	p.SourceDiskId = v
}

func (p *CreateDiskParam) GetSourceDiskId() int64 {
	return p.SourceDiskId
}
func (p *CreateDiskParam) SetSize(v int) {
	p.Size = v
}

func (p *CreateDiskParam) GetSize() int {
	return p.Size
}
func (p *CreateDiskParam) SetDistantFrom(v []int64) {
	p.DistantFrom = v
}

func (p *CreateDiskParam) GetDistantFrom() []int64 {
	return p.DistantFrom
}
func (p *CreateDiskParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDiskParam) GetName() string {
	return p.Name
}
func (p *CreateDiskParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDiskParam) GetDescription() string {
	return p.Description
}
func (p *CreateDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDiskParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDiskParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateDiskParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDiskParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDiskParam) GetFormat() string {
	return p.Format
}
func (p *CreateDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDiskParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadDiskParam is input parameters for the sacloud API
type ReadDiskParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewReadDiskParam return new ReadDiskParam
func NewReadDiskParam() *ReadDiskParam {
	return &ReadDiskParam{}
}

// Validate checks current values in model
func (p *ReadDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReadDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDiskParam) GetFormat() string {
	return p.Format
}
func (p *ReadDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadDiskParam) GetId() int64 {
	return p.Id
}

// UpdateDiskParam is input parameters for the sacloud API
type UpdateDiskParam struct {
	Connection        string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewUpdateDiskParam return new UpdateDiskParam
func NewUpdateDiskParam() *UpdateDiskParam {
	return &UpdateDiskParam{}
}

// Validate checks current values in model
func (p *UpdateDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Disk"].Commands["update"].Params["connection"].ValidateFunc
		errs := validator("--connection", p.Connection)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *UpdateDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateDiskParam) SetConnection(v string) {
	p.Connection = v
}

func (p *UpdateDiskParam) GetConnection() string {
	return p.Connection
}
func (p *UpdateDiskParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateDiskParam) GetName() string {
	return p.Name
}
func (p *UpdateDiskParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDiskParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDiskParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDiskParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDiskParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateDiskParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDiskParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDiskParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateDiskParam) GetId() int64 {
	return p.Id
}

// DeleteDiskParam is input parameters for the sacloud API
type DeleteDiskParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewDeleteDiskParam return new DeleteDiskParam
func NewDeleteDiskParam() *DeleteDiskParam {
	return &DeleteDiskParam{}
}

// Validate checks current values in model
func (p *DeleteDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *DeleteDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDiskParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDiskParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteDiskParam) GetId() int64 {
	return p.Id
}

// EditDiskParam is input parameters for the sacloud API
type EditDiskParam struct {
	Hostname            string
	Password            string
	SshKeyIds           []int64
	DisablePasswordAuth bool
	Ipaddress           string
	DefaultRoute        string
	NwMasklen           int
	StartupScriptIds    []int64
	Assumeyes           bool
	ParamTemplate       string
	ParamTemplateFile   string
	OutputType          string
	Column              []string
	Quiet               bool
	Format              string
	FormatFile          string
	Id                  int64
}

// NewEditDiskParam return new EditDiskParam
func NewEditDiskParam() *EditDiskParam {
	return &EditDiskParam{

		NwMasklen: 24,
	}
}

// Validate checks current values in model
func (p *EditDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Disk"].Commands["edit"].Params["ssh-key-ids"].ValidateFunc
		errs := validator("--ssh-key-ids", p.SshKeyIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["edit"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["edit"].Params["startup-script-ids"].ValidateFunc
		errs := validator("--startup-script-ids", p.StartupScriptIds)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *EditDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *EditDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["edit"]
}

func (p *EditDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *EditDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *EditDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *EditDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *EditDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *EditDiskParam) SetHostname(v string) {
	p.Hostname = v
}

func (p *EditDiskParam) GetHostname() string {
	return p.Hostname
}
func (p *EditDiskParam) SetPassword(v string) {
	p.Password = v
}

func (p *EditDiskParam) GetPassword() string {
	return p.Password
}
func (p *EditDiskParam) SetSshKeyIds(v []int64) {
	p.SshKeyIds = v
}

func (p *EditDiskParam) GetSshKeyIds() []int64 {
	return p.SshKeyIds
}
func (p *EditDiskParam) SetDisablePasswordAuth(v bool) {
	p.DisablePasswordAuth = v
}

func (p *EditDiskParam) GetDisablePasswordAuth() bool {
	return p.DisablePasswordAuth
}
func (p *EditDiskParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *EditDiskParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *EditDiskParam) SetDefaultRoute(v string) {
	p.DefaultRoute = v
}

func (p *EditDiskParam) GetDefaultRoute() string {
	return p.DefaultRoute
}
func (p *EditDiskParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *EditDiskParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *EditDiskParam) SetStartupScriptIds(v []int64) {
	p.StartupScriptIds = v
}

func (p *EditDiskParam) GetStartupScriptIds() []int64 {
	return p.StartupScriptIds
}
func (p *EditDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *EditDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *EditDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *EditDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *EditDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *EditDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *EditDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *EditDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *EditDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *EditDiskParam) GetColumn() []string {
	return p.Column
}
func (p *EditDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *EditDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *EditDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *EditDiskParam) GetFormat() string {
	return p.Format
}
func (p *EditDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *EditDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *EditDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *EditDiskParam) GetId() int64 {
	return p.Id
}

// ReinstallFromArchiveDiskParam is input parameters for the sacloud API
type ReinstallFromArchiveDiskParam struct {
	SourceArchiveId   int64
	DistantFrom       []int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewReinstallFromArchiveDiskParam return new ReinstallFromArchiveDiskParam
func NewReinstallFromArchiveDiskParam() *ReinstallFromArchiveDiskParam {
	return &ReinstallFromArchiveDiskParam{}
}

// Validate checks current values in model
func (p *ReinstallFromArchiveDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-archive"].Params["source-archive-id"].ValidateFunc
		errs := validator("--source-archive-id", p.SourceArchiveId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-archive"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReinstallFromArchiveDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromArchiveDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reinstall-from-archive"]
}

func (p *ReinstallFromArchiveDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReinstallFromArchiveDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReinstallFromArchiveDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReinstallFromArchiveDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReinstallFromArchiveDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ReinstallFromArchiveDiskParam) SetSourceArchiveId(v int64) {
	p.SourceArchiveId = v
}

func (p *ReinstallFromArchiveDiskParam) GetSourceArchiveId() int64 {
	return p.SourceArchiveId
}
func (p *ReinstallFromArchiveDiskParam) SetDistantFrom(v []int64) {
	p.DistantFrom = v
}

func (p *ReinstallFromArchiveDiskParam) GetDistantFrom() []int64 {
	return p.DistantFrom
}
func (p *ReinstallFromArchiveDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallFromArchiveDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallFromArchiveDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallFromArchiveDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallFromArchiveDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallFromArchiveDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallFromArchiveDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ReinstallFromArchiveDiskParam) GetId() int64 {
	return p.Id
}

// ReinstallFromDiskDiskParam is input parameters for the sacloud API
type ReinstallFromDiskDiskParam struct {
	SourceDiskId      int64
	DistantFrom       []int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewReinstallFromDiskDiskParam return new ReinstallFromDiskDiskParam
func NewReinstallFromDiskDiskParam() *ReinstallFromDiskDiskParam {
	return &ReinstallFromDiskDiskParam{}
}

// Validate checks current values in model
func (p *ReinstallFromDiskDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-disk"].Params["source-disk-id"].ValidateFunc
		errs := validator("--source-disk-id", p.SourceDiskId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["reinstall-from-disk"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReinstallFromDiskDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallFromDiskDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reinstall-from-disk"]
}

func (p *ReinstallFromDiskDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReinstallFromDiskDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReinstallFromDiskDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReinstallFromDiskDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReinstallFromDiskDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ReinstallFromDiskDiskParam) SetSourceDiskId(v int64) {
	p.SourceDiskId = v
}

func (p *ReinstallFromDiskDiskParam) GetSourceDiskId() int64 {
	return p.SourceDiskId
}
func (p *ReinstallFromDiskDiskParam) SetDistantFrom(v []int64) {
	p.DistantFrom = v
}

func (p *ReinstallFromDiskDiskParam) GetDistantFrom() []int64 {
	return p.DistantFrom
}
func (p *ReinstallFromDiskDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallFromDiskDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallFromDiskDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallFromDiskDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallFromDiskDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallFromDiskDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallFromDiskDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ReinstallFromDiskDiskParam) GetId() int64 {
	return p.Id
}

// ReinstallToBlankDiskParam is input parameters for the sacloud API
type ReinstallToBlankDiskParam struct {
	DistantFrom       []int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewReinstallToBlankDiskParam return new ReinstallToBlankDiskParam
func NewReinstallToBlankDiskParam() *ReinstallToBlankDiskParam {
	return &ReinstallToBlankDiskParam{}
}

// Validate checks current values in model
func (p *ReinstallToBlankDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Disk"].Commands["reinstall-to-blank"].Params["distant-from"].ValidateFunc
		errs := validator("--distant-from", p.DistantFrom)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReinstallToBlankDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ReinstallToBlankDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reinstall-to-blank"]
}

func (p *ReinstallToBlankDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReinstallToBlankDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReinstallToBlankDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReinstallToBlankDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReinstallToBlankDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ReinstallToBlankDiskParam) SetDistantFrom(v []int64) {
	p.DistantFrom = v
}

func (p *ReinstallToBlankDiskParam) GetDistantFrom() []int64 {
	return p.DistantFrom
}
func (p *ReinstallToBlankDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReinstallToBlankDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReinstallToBlankDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReinstallToBlankDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReinstallToBlankDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReinstallToBlankDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReinstallToBlankDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ReinstallToBlankDiskParam) GetId() int64 {
	return p.Id
}

// ServerConnectDiskParam is input parameters for the sacloud API
type ServerConnectDiskParam struct {
	ServerId          int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewServerConnectDiskParam return new ServerConnectDiskParam
func NewServerConnectDiskParam() *ServerConnectDiskParam {
	return &ServerConnectDiskParam{}
}

// Validate checks current values in model
func (p *ServerConnectDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["server-connect"].Params["server-id"].ValidateFunc
		errs := validator("--server-id", p.ServerId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerConnectDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerConnectDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-connect"]
}

func (p *ServerConnectDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerConnectDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerConnectDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerConnectDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerConnectDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerConnectDiskParam) SetServerId(v int64) {
	p.ServerId = v
}

func (p *ServerConnectDiskParam) GetServerId() int64 {
	return p.ServerId
}
func (p *ServerConnectDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerConnectDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerConnectDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerConnectDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerConnectDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerConnectDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerConnectDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerConnectDiskParam) GetId() int64 {
	return p.Id
}

// ServerDisconnectDiskParam is input parameters for the sacloud API
type ServerDisconnectDiskParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewServerDisconnectDiskParam return new ServerDisconnectDiskParam
func NewServerDisconnectDiskParam() *ServerDisconnectDiskParam {
	return &ServerDisconnectDiskParam{}
}

// Validate checks current values in model
func (p *ServerDisconnectDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDisconnectDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *ServerDisconnectDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-disconnect"]
}

func (p *ServerDisconnectDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDisconnectDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDisconnectDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDisconnectDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDisconnectDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerDisconnectDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDisconnectDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDisconnectDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDisconnectDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDisconnectDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDisconnectDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDisconnectDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerDisconnectDiskParam) GetId() int64 {
	return p.Id
}

// MonitorDiskParam is input parameters for the sacloud API
type MonitorDiskParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	End               string
	Id                int64
	KeyFormat         string
	Start             string
}

// NewMonitorDiskParam return new MonitorDiskParam
func NewMonitorDiskParam() *MonitorDiskParam {
	return &MonitorDiskParam{

		KeyFormat: "sakuracloud.{{.ID}}.disk",
	}
}

// Validate checks current values in model
func (p *MonitorDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Disk"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Disk"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *MonitorDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *MonitorDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorDiskParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorDiskParam) GetFormat() string {
	return p.Format
}
func (p *MonitorDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorDiskParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorDiskParam) GetEnd() string {
	return p.End
}
func (p *MonitorDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *MonitorDiskParam) GetId() int64 {
	return p.Id
}
func (p *MonitorDiskParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorDiskParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorDiskParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorDiskParam) GetStart() string {
	return p.Start
}

// WaitForCopyDiskParam is input parameters for the sacloud API
type WaitForCopyDiskParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewWaitForCopyDiskParam return new WaitForCopyDiskParam
func NewWaitForCopyDiskParam() *WaitForCopyDiskParam {
	return &WaitForCopyDiskParam{}
}

// Validate checks current values in model
func (p *WaitForCopyDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForCopyDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["Disk"]
}

func (p *WaitForCopyDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-copy"]
}

func (p *WaitForCopyDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForCopyDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForCopyDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForCopyDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForCopyDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForCopyDiskParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForCopyDiskParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForCopyDiskParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForCopyDiskParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForCopyDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForCopyDiskParam) GetId() int64 {
	return p.Id
}
