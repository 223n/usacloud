// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListDNSParam is input parameters for the sacloud API
type ListDNSParam struct {
	Name       []string
	Id         []int64
	Tags       []string
	From       int
	Max        int
	Sort       []string
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
}

// NewListDNSParam return new ListDNSParam
func NewListDNSParam() *ListDNSParam {
	return &ListDNSParam{}
}

// Validate checks current values in model
func (p *ListDNSParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ListDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *ListDNSParam) SetName(v []string) {
	p.Name = v
}

func (p *ListDNSParam) GetName() []string {
	return p.Name
}
func (p *ListDNSParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListDNSParam) GetId() []int64 {
	return p.Id
}
func (p *ListDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListDNSParam) GetTags() []string {
	return p.Tags
}
func (p *ListDNSParam) SetFrom(v int) {
	p.From = v
}

func (p *ListDNSParam) GetFrom() int {
	return p.From
}
func (p *ListDNSParam) SetMax(v int) {
	p.Max = v
}

func (p *ListDNSParam) GetMax() int {
	return p.Max
}
func (p *ListDNSParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListDNSParam) GetSort() []string {
	return p.Sort
}
func (p *ListDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListDNSParam) GetColumn() []string {
	return p.Column
}
func (p *ListDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListDNSParam) GetFormat() string {
	return p.Format
}
func (p *ListDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListDNSParam) GetFormatFile() string {
	return p.FormatFile
}

// RecordInfoDNSParam is input parameters for the sacloud API
type RecordInfoDNSParam struct {
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewRecordInfoDNSParam return new RecordInfoDNSParam
func NewRecordInfoDNSParam() *RecordInfoDNSParam {
	return &RecordInfoDNSParam{}
}

// Validate checks current values in model
func (p *RecordInfoDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordInfoDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordInfoDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-info"]
}

func (p *RecordInfoDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordInfoDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordInfoDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordInfoDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordInfoDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *RecordInfoDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordInfoDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordInfoDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordInfoDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordInfoDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordInfoDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordInfoDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordInfoDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordInfoDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordInfoDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordInfoDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *RecordInfoDNSParam) GetId() int64 {
	return p.Id
}

// CreateDNSParam is input parameters for the sacloud API
type CreateDNSParam struct {
	Name        string
	Description string
	Tags        []string
	IconId      int64
	Assumeyes   bool
	OutputType  string
	Column      []string
	Quiet       bool
	Format      string
	FormatFile  string
}

// NewCreateDNSParam return new CreateDNSParam
func NewCreateDNSParam() *CreateDNSParam {
	return &CreateDNSParam{}
}

// Validate checks current values in model
func (p *CreateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *CreateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateDNSParam) SetName(v string) {
	p.Name = v
}

func (p *CreateDNSParam) GetName() string {
	return p.Name
}
func (p *CreateDNSParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateDNSParam) GetDescription() string {
	return p.Description
}
func (p *CreateDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateDNSParam) GetTags() []string {
	return p.Tags
}
func (p *CreateDNSParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateDNSParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *CreateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateDNSParam) GetFormat() string {
	return p.Format
}
func (p *CreateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateDNSParam) GetFormatFile() string {
	return p.FormatFile
}

// RecordAddDNSParam is input parameters for the sacloud API
type RecordAddDNSParam struct {
	Name        string
	Type        string
	Value       string
	Ttl         int
	MxPriority  int
	SrvPriority int
	SrvWeight   int
	SrvPort     int
	SrvTarget   string
	Assumeyes   bool
	OutputType  string
	Column      []string
	Quiet       bool
	Format      string
	FormatFile  string
	Id          int64
}

// NewRecordAddDNSParam return new RecordAddDNSParam
func NewRecordAddDNSParam() *RecordAddDNSParam {
	return &RecordAddDNSParam{

		Ttl: 3600,

		MxPriority: 10,
	}
}

// Validate checks current values in model
func (p *RecordAddDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-add"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordAddDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordAddDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-add"]
}

func (p *RecordAddDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordAddDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordAddDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordAddDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordAddDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *RecordAddDNSParam) SetName(v string) {
	p.Name = v
}

func (p *RecordAddDNSParam) GetName() string {
	return p.Name
}
func (p *RecordAddDNSParam) SetType(v string) {
	p.Type = v
}

func (p *RecordAddDNSParam) GetType() string {
	return p.Type
}
func (p *RecordAddDNSParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordAddDNSParam) GetValue() string {
	return p.Value
}
func (p *RecordAddDNSParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordAddDNSParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordAddDNSParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordAddDNSParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordAddDNSParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordAddDNSParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordAddDNSParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordAddDNSParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordAddDNSParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordAddDNSParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordAddDNSParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordAddDNSParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordAddDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordAddDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordAddDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordAddDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordAddDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordAddDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordAddDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordAddDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordAddDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordAddDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordAddDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordAddDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordAddDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *RecordAddDNSParam) GetId() int64 {
	return p.Id
}

// ReadDNSParam is input parameters for the sacloud API
type ReadDNSParam struct {
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewReadDNSParam return new ReadDNSParam
func NewReadDNSParam() *ReadDNSParam {
	return &ReadDNSParam{}
}

// Validate checks current values in model
func (p *ReadDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *ReadDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadDNSParam) GetColumn() []string {
	return p.Column
}
func (p *ReadDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadDNSParam) GetFormat() string {
	return p.Format
}
func (p *ReadDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadDNSParam) GetId() int64 {
	return p.Id
}

// RecordUpdateDNSParam is input parameters for the sacloud API
type RecordUpdateDNSParam struct {
	Index       int
	Name        string
	Type        string
	Value       string
	Ttl         int
	MxPriority  int
	SrvPriority int
	SrvWeight   int
	SrvPort     int
	SrvTarget   string
	Assumeyes   bool
	OutputType  string
	Column      []string
	Quiet       bool
	Format      string
	FormatFile  string
	Id          int64
}

// NewRecordUpdateDNSParam return new RecordUpdateDNSParam
func NewRecordUpdateDNSParam() *RecordUpdateDNSParam {
	return &RecordUpdateDNSParam{}
}

// Validate checks current values in model
func (p *RecordUpdateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["type"].ValidateFunc
		errs := validator("--type", p.Type)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["ttl"].ValidateFunc
		errs := validator("--ttl", p.Ttl)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["mx-priority"].ValidateFunc
		errs := validator("--mx-priority", p.MxPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-priority"].ValidateFunc
		errs := validator("--srv-priority", p.SrvPriority)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-weight"].ValidateFunc
		errs := validator("--srv-weight", p.SrvWeight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-port"].ValidateFunc
		errs := validator("--srv-port", p.SrvPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["record-update"].Params["srv-target"].ValidateFunc
		errs := validator("--srv-target", p.SrvTarget)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordUpdateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordUpdateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-update"]
}

func (p *RecordUpdateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordUpdateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordUpdateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordUpdateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordUpdateDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *RecordUpdateDNSParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordUpdateDNSParam) GetIndex() int {
	return p.Index
}
func (p *RecordUpdateDNSParam) SetName(v string) {
	p.Name = v
}

func (p *RecordUpdateDNSParam) GetName() string {
	return p.Name
}
func (p *RecordUpdateDNSParam) SetType(v string) {
	p.Type = v
}

func (p *RecordUpdateDNSParam) GetType() string {
	return p.Type
}
func (p *RecordUpdateDNSParam) SetValue(v string) {
	p.Value = v
}

func (p *RecordUpdateDNSParam) GetValue() string {
	return p.Value
}
func (p *RecordUpdateDNSParam) SetTtl(v int) {
	p.Ttl = v
}

func (p *RecordUpdateDNSParam) GetTtl() int {
	return p.Ttl
}
func (p *RecordUpdateDNSParam) SetMxPriority(v int) {
	p.MxPriority = v
}

func (p *RecordUpdateDNSParam) GetMxPriority() int {
	return p.MxPriority
}
func (p *RecordUpdateDNSParam) SetSrvPriority(v int) {
	p.SrvPriority = v
}

func (p *RecordUpdateDNSParam) GetSrvPriority() int {
	return p.SrvPriority
}
func (p *RecordUpdateDNSParam) SetSrvWeight(v int) {
	p.SrvWeight = v
}

func (p *RecordUpdateDNSParam) GetSrvWeight() int {
	return p.SrvWeight
}
func (p *RecordUpdateDNSParam) SetSrvPort(v int) {
	p.SrvPort = v
}

func (p *RecordUpdateDNSParam) GetSrvPort() int {
	return p.SrvPort
}
func (p *RecordUpdateDNSParam) SetSrvTarget(v string) {
	p.SrvTarget = v
}

func (p *RecordUpdateDNSParam) GetSrvTarget() string {
	return p.SrvTarget
}
func (p *RecordUpdateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordUpdateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordUpdateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordUpdateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordUpdateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordUpdateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordUpdateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordUpdateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordUpdateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordUpdateDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordUpdateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordUpdateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordUpdateDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *RecordUpdateDNSParam) GetId() int64 {
	return p.Id
}

// RecordDeleteDNSParam is input parameters for the sacloud API
type RecordDeleteDNSParam struct {
	Index      int
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewRecordDeleteDNSParam return new RecordDeleteDNSParam
func NewRecordDeleteDNSParam() *RecordDeleteDNSParam {
	return &RecordDeleteDNSParam{}
}

// Validate checks current values in model
func (p *RecordDeleteDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *RecordDeleteDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *RecordDeleteDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["record-delete"]
}

func (p *RecordDeleteDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *RecordDeleteDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *RecordDeleteDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *RecordDeleteDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *RecordDeleteDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *RecordDeleteDNSParam) SetIndex(v int) {
	p.Index = v
}

func (p *RecordDeleteDNSParam) GetIndex() int {
	return p.Index
}
func (p *RecordDeleteDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *RecordDeleteDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *RecordDeleteDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *RecordDeleteDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *RecordDeleteDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *RecordDeleteDNSParam) GetColumn() []string {
	return p.Column
}
func (p *RecordDeleteDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *RecordDeleteDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *RecordDeleteDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *RecordDeleteDNSParam) GetFormat() string {
	return p.Format
}
func (p *RecordDeleteDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *RecordDeleteDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *RecordDeleteDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *RecordDeleteDNSParam) GetId() int64 {
	return p.Id
}

// UpdateDNSParam is input parameters for the sacloud API
type UpdateDNSParam struct {
	Description string
	Tags        []string
	IconId      int64
	Assumeyes   bool
	OutputType  string
	Column      []string
	Quiet       bool
	Format      string
	FormatFile  string
	Id          int64
}

// NewUpdateDNSParam return new UpdateDNSParam
func NewUpdateDNSParam() *UpdateDNSParam {
	return &UpdateDNSParam{}
}

// Validate checks current values in model
func (p *UpdateDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["DNS"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *UpdateDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateDNSParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateDNSParam) GetDescription() string {
	return p.Description
}
func (p *UpdateDNSParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateDNSParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateDNSParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateDNSParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateDNSParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateDNSParam) GetFormat() string {
	return p.Format
}
func (p *UpdateDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateDNSParam) GetId() int64 {
	return p.Id
}

// DeleteDNSParam is input parameters for the sacloud API
type DeleteDNSParam struct {
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewDeleteDNSParam return new DeleteDNSParam
func NewDeleteDNSParam() *DeleteDNSParam {
	return &DeleteDNSParam{}
}

// Validate checks current values in model
func (p *DeleteDNSParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteDNSParam) GetResourceDef() *schema.Resource {
	return define.Resources["DNS"]
}

func (p *DeleteDNSParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteDNSParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteDNSParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteDNSParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteDNSParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteDNSParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteDNSParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteDNSParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteDNSParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteDNSParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteDNSParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteDNSParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteDNSParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteDNSParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteDNSParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteDNSParam) GetFormat() string {
	return p.Format
}
func (p *DeleteDNSParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteDNSParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteDNSParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteDNSParam) GetId() int64 {
	return p.Id
}
