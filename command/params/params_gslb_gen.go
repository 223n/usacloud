// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListGSLBParam is input parameters for the sacloud API
type ListGSLBParam struct {
	Name              []string
	Id                []int64
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewListGSLBParam return new ListGSLBParam
func NewListGSLBParam() *ListGSLBParam {
	return &ListGSLBParam{}
}

// Validate checks current values in model
func (p *ListGSLBParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ListGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ListGSLBParam) SetName(v []string) {
	p.Name = v
}

func (p *ListGSLBParam) GetName() []string {
	return p.Name
}
func (p *ListGSLBParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListGSLBParam) GetId() []int64 {
	return p.Id
}
func (p *ListGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *ListGSLBParam) SetFrom(v int) {
	p.From = v
}

func (p *ListGSLBParam) GetFrom() int {
	return p.From
}
func (p *ListGSLBParam) SetMax(v int) {
	p.Max = v
}

func (p *ListGSLBParam) GetMax() int {
	return p.Max
}
func (p *ListGSLBParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListGSLBParam) GetSort() []string {
	return p.Sort
}
func (p *ListGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ListGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ListGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListGSLBParam) GetFormatFile() string {
	return p.FormatFile
}

// ServerInfoGSLBParam is input parameters for the sacloud API
type ServerInfoGSLBParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewServerInfoGSLBParam return new ServerInfoGSLBParam
func NewServerInfoGSLBParam() *ServerInfoGSLBParam {
	return &ServerInfoGSLBParam{}
}

// Validate checks current values in model
func (p *ServerInfoGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerInfoGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerInfoGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-info"]
}

func (p *ServerInfoGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerInfoGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerInfoGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerInfoGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerInfoGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerInfoGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerInfoGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerInfoGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerInfoGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerInfoGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerInfoGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerInfoGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerInfoGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerInfoGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerInfoGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerInfoGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerInfoGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerInfoGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerInfoGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerInfoGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerInfoGSLBParam) GetId() int64 {
	return p.Id
}

// CreateGSLBParam is input parameters for the sacloud API
type CreateGSLBParam struct {
	Protocol          string
	HostHeader        string
	Path              string
	ResponseCode      int
	Port              int
	DelayLoop         int
	Weighted          bool
	SorryServer       string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewCreateGSLBParam return new CreateGSLBParam
func NewCreateGSLBParam() *CreateGSLBParam {
	return &CreateGSLBParam{

		Protocol: "ping",

		Path: "/",

		ResponseCode: 200,

		DelayLoop: 10,

		Weighted: true,
	}
}

// Validate checks current values in model
func (p *CreateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *CreateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *CreateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *CreateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *CreateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *CreateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *CreateGSLBParam) GetPath() string {
	return p.Path
}
func (p *CreateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *CreateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *CreateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *CreateGSLBParam) GetPort() int {
	return p.Port
}
func (p *CreateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *CreateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *CreateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *CreateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *CreateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *CreateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *CreateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *CreateGSLBParam) GetName() string {
	return p.Name
}
func (p *CreateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *CreateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *CreateGSLBParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateGSLBParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *CreateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *CreateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}

// ServerAddGSLBParam is input parameters for the sacloud API
type ServerAddGSLBParam struct {
	Ipaddress         string
	Enabled           bool
	Weight            int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewServerAddGSLBParam return new ServerAddGSLBParam
func NewServerAddGSLBParam() *ServerAddGSLBParam {
	return &ServerAddGSLBParam{

		Enabled: true,
	}
}

// Validate checks current values in model
func (p *ServerAddGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-add"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerAddGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerAddGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-add"]
}

func (p *ServerAddGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerAddGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerAddGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerAddGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerAddGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerAddGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerAddGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerAddGSLBParam) SetEnabled(v bool) {
	p.Enabled = v
}

func (p *ServerAddGSLBParam) GetEnabled() bool {
	return p.Enabled
}
func (p *ServerAddGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerAddGSLBParam) GetWeight() int {
	return p.Weight
}
func (p *ServerAddGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerAddGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerAddGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerAddGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerAddGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerAddGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerAddGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerAddGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerAddGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerAddGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerAddGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerAddGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerAddGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerAddGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerAddGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerAddGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerAddGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerAddGSLBParam) GetId() int64 {
	return p.Id
}

// ReadGSLBParam is input parameters for the sacloud API
type ReadGSLBParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewReadGSLBParam return new ReadGSLBParam
func NewReadGSLBParam() *ReadGSLBParam {
	return &ReadGSLBParam{}
}

// Validate checks current values in model
func (p *ReadGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ReadGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ReadGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ReadGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadGSLBParam) GetId() int64 {
	return p.Id
}

// ServerUpdateGSLBParam is input parameters for the sacloud API
type ServerUpdateGSLBParam struct {
	Index             int
	Ipaddress         string
	Enabled           bool
	Weight            int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewServerUpdateGSLBParam return new ServerUpdateGSLBParam
func NewServerUpdateGSLBParam() *ServerUpdateGSLBParam {
	return &ServerUpdateGSLBParam{}
}

// Validate checks current values in model
func (p *ServerUpdateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["server-update"].Params["weight"].ValidateFunc
		errs := validator("--weight", p.Weight)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerUpdateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerUpdateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-update"]
}

func (p *ServerUpdateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerUpdateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerUpdateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerUpdateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerUpdateGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerUpdateGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerUpdateGSLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerUpdateGSLBParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *ServerUpdateGSLBParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *ServerUpdateGSLBParam) SetEnabled(v bool) {
	p.Enabled = v
}

func (p *ServerUpdateGSLBParam) GetEnabled() bool {
	return p.Enabled
}
func (p *ServerUpdateGSLBParam) SetWeight(v int) {
	p.Weight = v
}

func (p *ServerUpdateGSLBParam) GetWeight() int {
	return p.Weight
}
func (p *ServerUpdateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerUpdateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerUpdateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerUpdateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerUpdateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerUpdateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerUpdateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerUpdateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerUpdateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerUpdateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerUpdateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerUpdateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerUpdateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerUpdateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerUpdateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerUpdateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerUpdateGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerUpdateGSLBParam) GetId() int64 {
	return p.Id
}

// ServerDeleteGSLBParam is input parameters for the sacloud API
type ServerDeleteGSLBParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewServerDeleteGSLBParam return new ServerDeleteGSLBParam
func NewServerDeleteGSLBParam() *ServerDeleteGSLBParam {
	return &ServerDeleteGSLBParam{}
}

// Validate checks current values in model
func (p *ServerDeleteGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ServerDeleteGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *ServerDeleteGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["server-delete"]
}

func (p *ServerDeleteGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ServerDeleteGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ServerDeleteGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ServerDeleteGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ServerDeleteGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *ServerDeleteGSLBParam) SetIndex(v int) {
	p.Index = v
}

func (p *ServerDeleteGSLBParam) GetIndex() int {
	return p.Index
}
func (p *ServerDeleteGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ServerDeleteGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ServerDeleteGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ServerDeleteGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ServerDeleteGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ServerDeleteGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ServerDeleteGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ServerDeleteGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *ServerDeleteGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ServerDeleteGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *ServerDeleteGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ServerDeleteGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ServerDeleteGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *ServerDeleteGSLBParam) GetFormat() string {
	return p.Format
}
func (p *ServerDeleteGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ServerDeleteGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ServerDeleteGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *ServerDeleteGSLBParam) GetId() int64 {
	return p.Id
}

// UpdateGSLBParam is input parameters for the sacloud API
type UpdateGSLBParam struct {
	Protocol          string
	HostHeader        string
	Path              string
	ResponseCode      int
	Port              int
	DelayLoop         int
	Weighted          bool
	SorryServer       string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewUpdateGSLBParam return new UpdateGSLBParam
func NewUpdateGSLBParam() *UpdateGSLBParam {
	return &UpdateGSLBParam{}
}

// Validate checks current values in model
func (p *UpdateGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["port"].ValidateFunc
		errs := validator("--port", p.Port)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["delay-loop"].ValidateFunc
		errs := validator("--delay-loop", p.DelayLoop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["GSLB"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *UpdateGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateGSLBParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *UpdateGSLBParam) GetProtocol() string {
	return p.Protocol
}
func (p *UpdateGSLBParam) SetHostHeader(v string) {
	p.HostHeader = v
}

func (p *UpdateGSLBParam) GetHostHeader() string {
	return p.HostHeader
}
func (p *UpdateGSLBParam) SetPath(v string) {
	p.Path = v
}

func (p *UpdateGSLBParam) GetPath() string {
	return p.Path
}
func (p *UpdateGSLBParam) SetResponseCode(v int) {
	p.ResponseCode = v
}

func (p *UpdateGSLBParam) GetResponseCode() int {
	return p.ResponseCode
}
func (p *UpdateGSLBParam) SetPort(v int) {
	p.Port = v
}

func (p *UpdateGSLBParam) GetPort() int {
	return p.Port
}
func (p *UpdateGSLBParam) SetDelayLoop(v int) {
	p.DelayLoop = v
}

func (p *UpdateGSLBParam) GetDelayLoop() int {
	return p.DelayLoop
}
func (p *UpdateGSLBParam) SetWeighted(v bool) {
	p.Weighted = v
}

func (p *UpdateGSLBParam) GetWeighted() bool {
	return p.Weighted
}
func (p *UpdateGSLBParam) SetSorryServer(v string) {
	p.SorryServer = v
}

func (p *UpdateGSLBParam) GetSorryServer() string {
	return p.SorryServer
}
func (p *UpdateGSLBParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateGSLBParam) GetName() string {
	return p.Name
}
func (p *UpdateGSLBParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateGSLBParam) GetDescription() string {
	return p.Description
}
func (p *UpdateGSLBParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateGSLBParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateGSLBParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateGSLBParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateGSLBParam) GetFormat() string {
	return p.Format
}
func (p *UpdateGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateGSLBParam) GetId() int64 {
	return p.Id
}

// DeleteGSLBParam is input parameters for the sacloud API
type DeleteGSLBParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewDeleteGSLBParam return new DeleteGSLBParam
func NewDeleteGSLBParam() *DeleteGSLBParam {
	return &DeleteGSLBParam{}
}

// Validate checks current values in model
func (p *DeleteGSLBParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteGSLBParam) GetResourceDef() *schema.Resource {
	return define.Resources["GSLB"]
}

func (p *DeleteGSLBParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteGSLBParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteGSLBParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteGSLBParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteGSLBParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteGSLBParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteGSLBParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteGSLBParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteGSLBParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteGSLBParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteGSLBParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteGSLBParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteGSLBParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteGSLBParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteGSLBParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteGSLBParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteGSLBParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteGSLBParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteGSLBParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteGSLBParam) GetFormat() string {
	return p.Format
}
func (p *DeleteGSLBParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteGSLBParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteGSLBParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteGSLBParam) GetId() int64 {
	return p.Id
}
