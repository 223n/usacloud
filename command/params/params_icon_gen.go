// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListIconParam is input parameters for the sacloud API
type ListIconParam struct {
	Name       []string
	Id         []int64
	Scope      string
	Tags       []string
	From       int
	Max        int
	Sort       []string
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
}

// NewListIconParam return new ListIconParam
func NewListIconParam() *ListIconParam {
	return &ListIconParam{}
}

// Validate checks current values in model
func (p *ListIconParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListIconParam) GetResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ListIconParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListIconParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListIconParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListIconParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListIconParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListIconParam) GetOutputFormat() string {
	return "table"
}

func (p *ListIconParam) SetName(v []string) {
	p.Name = v
}

func (p *ListIconParam) GetName() []string {
	return p.Name
}
func (p *ListIconParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListIconParam) GetId() []int64 {
	return p.Id
}
func (p *ListIconParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListIconParam) GetScope() string {
	return p.Scope
}
func (p *ListIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListIconParam) GetTags() []string {
	return p.Tags
}
func (p *ListIconParam) SetFrom(v int) {
	p.From = v
}

func (p *ListIconParam) GetFrom() int {
	return p.From
}
func (p *ListIconParam) SetMax(v int) {
	p.Max = v
}

func (p *ListIconParam) GetMax() int {
	return p.Max
}
func (p *ListIconParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListIconParam) GetSort() []string {
	return p.Sort
}
func (p *ListIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListIconParam) GetColumn() []string {
	return p.Column
}
func (p *ListIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListIconParam) GetFormat() string {
	return p.Format
}
func (p *ListIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListIconParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateIconParam is input parameters for the sacloud API
type CreateIconParam struct {
	Image      string
	Name       string
	Tags       []string
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
}

// NewCreateIconParam return new CreateIconParam
func NewCreateIconParam() *CreateIconParam {
	return &CreateIconParam{}
}

// Validate checks current values in model
func (p *CreateIconParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["image"].ValidateFunc
		errs := validator("--image", p.Image)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateIconParam) GetResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *CreateIconParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateIconParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateIconParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateIconParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateIconParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateIconParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateIconParam) SetImage(v string) {
	p.Image = v
}

func (p *CreateIconParam) GetImage() string {
	return p.Image
}
func (p *CreateIconParam) SetName(v string) {
	p.Name = v
}

func (p *CreateIconParam) GetName() string {
	return p.Name
}
func (p *CreateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateIconParam) GetTags() []string {
	return p.Tags
}
func (p *CreateIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateIconParam) GetColumn() []string {
	return p.Column
}
func (p *CreateIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateIconParam) GetFormat() string {
	return p.Format
}
func (p *CreateIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateIconParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadIconParam is input parameters for the sacloud API
type ReadIconParam struct {
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewReadIconParam return new ReadIconParam
func NewReadIconParam() *ReadIconParam {
	return &ReadIconParam{}
}

// Validate checks current values in model
func (p *ReadIconParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadIconParam) GetResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *ReadIconParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadIconParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadIconParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadIconParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadIconParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadIconParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadIconParam) GetColumn() []string {
	return p.Column
}
func (p *ReadIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadIconParam) GetFormat() string {
	return p.Format
}
func (p *ReadIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadIconParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadIconParam) GetId() int64 {
	return p.Id
}

// UpdateIconParam is input parameters for the sacloud API
type UpdateIconParam struct {
	Name       string
	Tags       []string
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewUpdateIconParam return new UpdateIconParam
func NewUpdateIconParam() *UpdateIconParam {
	return &UpdateIconParam{}
}

// Validate checks current values in model
func (p *UpdateIconParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["Icon"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["Icon"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateIconParam) GetResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *UpdateIconParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateIconParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateIconParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateIconParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateIconParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateIconParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateIconParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateIconParam) GetName() string {
	return p.Name
}
func (p *UpdateIconParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateIconParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateIconParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateIconParam) GetFormat() string {
	return p.Format
}
func (p *UpdateIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateIconParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateIconParam) GetId() int64 {
	return p.Id
}

// DeleteIconParam is input parameters for the sacloud API
type DeleteIconParam struct {
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewDeleteIconParam return new DeleteIconParam
func NewDeleteIconParam() *DeleteIconParam {
	return &DeleteIconParam{}
}

// Validate checks current values in model
func (p *DeleteIconParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteIconParam) GetResourceDef() *schema.Resource {
	return define.Resources["Icon"]
}

func (p *DeleteIconParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteIconParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteIconParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteIconParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteIconParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteIconParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteIconParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteIconParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteIconParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteIconParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteIconParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteIconParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteIconParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteIconParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteIconParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteIconParam) GetFormat() string {
	return p.Format
}
func (p *DeleteIconParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteIconParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteIconParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteIconParam) GetId() int64 {
	return p.Id
}
