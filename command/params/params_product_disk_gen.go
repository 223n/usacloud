// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListProductDiskParam is input parameters for the sacloud API
type ListProductDiskParam struct {
	Name       []string
	Id         []int64
	From       int
	Max        int
	Sort       []string
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
}

// NewListProductDiskParam return new ListProductDiskParam
func NewListProductDiskParam() *ListProductDiskParam {
	return &ListProductDiskParam{}
}

// Validate checks current values in model
func (p *ListProductDiskParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductDisk"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListProductDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProductDisk"]
}

func (p *ListProductDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListProductDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListProductDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListProductDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListProductDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListProductDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ListProductDiskParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProductDiskParam) GetName() []string {
	return p.Name
}
func (p *ListProductDiskParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListProductDiskParam) GetId() []int64 {
	return p.Id
}
func (p *ListProductDiskParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProductDiskParam) GetFrom() int {
	return p.From
}
func (p *ListProductDiskParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProductDiskParam) GetMax() int {
	return p.Max
}
func (p *ListProductDiskParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProductDiskParam) GetSort() []string {
	return p.Sort
}
func (p *ListProductDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListProductDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListProductDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListProductDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ListProductDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListProductDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListProductDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListProductDiskParam) GetFormat() string {
	return p.Format
}
func (p *ListProductDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListProductDiskParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadProductDiskParam is input parameters for the sacloud API
type ReadProductDiskParam struct {
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewReadProductDiskParam return new ReadProductDiskParam
func NewReadProductDiskParam() *ReadProductDiskParam {
	return &ReadProductDiskParam{}
}

// Validate checks current values in model
func (p *ReadProductDiskParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductDisk"].Commands["read"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadProductDiskParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProductDisk"]
}

func (p *ReadProductDiskParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadProductDiskParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadProductDiskParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadProductDiskParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadProductDiskParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadProductDiskParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadProductDiskParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReadProductDiskParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReadProductDiskParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadProductDiskParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadProductDiskParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadProductDiskParam) GetColumn() []string {
	return p.Column
}
func (p *ReadProductDiskParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadProductDiskParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadProductDiskParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadProductDiskParam) GetFormat() string {
	return p.Format
}
func (p *ReadProductDiskParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadProductDiskParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadProductDiskParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadProductDiskParam) GetId() int64 {
	return p.Id
}
