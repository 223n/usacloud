// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListProductInternetParam is input parameters for the sacloud API
type ListProductInternetParam struct {
	Name              []string
	Id                []int64
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewListProductInternetParam return new ListProductInternetParam
func NewListProductInternetParam() *ListProductInternetParam {
	return &ListProductInternetParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ListProductInternetParam) FillValueToSkeleton() {
	if isEmpty(p.Name) {
		p.Name = []string{""}
	}
	if isEmpty(p.Id) {
		p.Id = []int64{0}
	}
	if isEmpty(p.From) {
		p.From = 0
	}
	if isEmpty(p.Max) {
		p.Max = 0
	}
	if isEmpty(p.Sort) {
		p.Sort = []string{""}
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}

}

// Validate checks current values in model
func (p *ListProductInternetParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductInternet"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListProductInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProductInternet"]
}

func (p *ListProductInternetParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListProductInternetParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListProductInternetParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListProductInternetParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListProductInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListProductInternetParam) GetOutputFormat() string {
	return "table"
}

func (p *ListProductInternetParam) SetName(v []string) {
	p.Name = v
}

func (p *ListProductInternetParam) GetName() []string {
	return p.Name
}
func (p *ListProductInternetParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListProductInternetParam) GetId() []int64 {
	return p.Id
}
func (p *ListProductInternetParam) SetFrom(v int) {
	p.From = v
}

func (p *ListProductInternetParam) GetFrom() int {
	return p.From
}
func (p *ListProductInternetParam) SetMax(v int) {
	p.Max = v
}

func (p *ListProductInternetParam) GetMax() int {
	return p.Max
}
func (p *ListProductInternetParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListProductInternetParam) GetSort() []string {
	return p.Sort
}
func (p *ListProductInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListProductInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListProductInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListProductInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListProductInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ListProductInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ListProductInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListProductInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListProductInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListProductInternetParam) GetColumn() []string {
	return p.Column
}
func (p *ListProductInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListProductInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListProductInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListProductInternetParam) GetFormat() string {
	return p.Format
}
func (p *ListProductInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListProductInternetParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadProductInternetParam is input parameters for the sacloud API
type ReadProductInternetParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	GenerateSkeleton  bool
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewReadProductInternetParam return new ReadProductInternetParam
func NewReadProductInternetParam() *ReadProductInternetParam {
	return &ReadProductInternetParam{}
}

// FillValueToSkeleton fill values to empty fields
func (p *ReadProductInternetParam) FillValueToSkeleton() {
	if isEmpty(p.Assumeyes) {
		p.Assumeyes = false
	}
	if isEmpty(p.ParamTemplate) {
		p.ParamTemplate = ""
	}
	if isEmpty(p.ParamTemplateFile) {
		p.ParamTemplateFile = ""
	}
	if isEmpty(p.GenerateSkeleton) {
		p.GenerateSkeleton = false
	}
	if isEmpty(p.OutputType) {
		p.OutputType = ""
	}
	if isEmpty(p.Column) {
		p.Column = []string{""}
	}
	if isEmpty(p.Quiet) {
		p.Quiet = false
	}
	if isEmpty(p.Format) {
		p.Format = ""
	}
	if isEmpty(p.FormatFile) {
		p.FormatFile = ""
	}
	if isEmpty(p.Id) {
		p.Id = 0
	}

}

// Validate checks current values in model
func (p *ReadProductInternetParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["ProductInternet"].Commands["read"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadProductInternetParam) GetResourceDef() *schema.Resource {
	return define.Resources["ProductInternet"]
}

func (p *ReadProductInternetParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadProductInternetParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadProductInternetParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadProductInternetParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadProductInternetParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadProductInternetParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadProductInternetParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ReadProductInternetParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ReadProductInternetParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadProductInternetParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadProductInternetParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadProductInternetParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadProductInternetParam) SetGenerateSkeleton(v bool) {
	p.GenerateSkeleton = v
}

func (p *ReadProductInternetParam) GetGenerateSkeleton() bool {
	return p.GenerateSkeleton
}
func (p *ReadProductInternetParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadProductInternetParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadProductInternetParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadProductInternetParam) GetColumn() []string {
	return p.Column
}
func (p *ReadProductInternetParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadProductInternetParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadProductInternetParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadProductInternetParam) GetFormat() string {
	return p.Format
}
func (p *ReadProductInternetParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadProductInternetParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadProductInternetParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadProductInternetParam) GetId() int64 {
	return p.Id
}
