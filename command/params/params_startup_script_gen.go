// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListStartupScriptParam is input parameters for the sacloud API
type ListStartupScriptParam struct {
	Name       []string
	Id         []int64
	Scope      string
	Tags       []string
	From       int
	Max        int
	Sort       []string
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
}

// NewListStartupScriptParam return new ListStartupScriptParam
func NewListStartupScriptParam() *ListStartupScriptParam {
	return &ListStartupScriptParam{}
}

// Validate checks current values in model
func (p *ListStartupScriptParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["scope"].ValidateFunc
		errs := validator("--scope", p.Scope)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ListStartupScriptParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListStartupScriptParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListStartupScriptParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListStartupScriptParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListStartupScriptParam) GetOutputFormat() string {
	return "table"
}

func (p *ListStartupScriptParam) SetName(v []string) {
	p.Name = v
}

func (p *ListStartupScriptParam) GetName() []string {
	return p.Name
}
func (p *ListStartupScriptParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListStartupScriptParam) GetId() []int64 {
	return p.Id
}
func (p *ListStartupScriptParam) SetScope(v string) {
	p.Scope = v
}

func (p *ListStartupScriptParam) GetScope() string {
	return p.Scope
}
func (p *ListStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *ListStartupScriptParam) SetFrom(v int) {
	p.From = v
}

func (p *ListStartupScriptParam) GetFrom() int {
	return p.From
}
func (p *ListStartupScriptParam) SetMax(v int) {
	p.Max = v
}

func (p *ListStartupScriptParam) GetMax() int {
	return p.Max
}
func (p *ListStartupScriptParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListStartupScriptParam) GetSort() []string {
	return p.Sort
}
func (p *ListStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *ListStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *ListStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateStartupScriptParam is input parameters for the sacloud API
type CreateStartupScriptParam struct {
	Script        string
	ScriptContent string
	Name          string
	Tags          []string
	IconId        int64
	Assumeyes     bool
	OutputType    string
	Column        []string
	Quiet         bool
	Format        string
	FormatFile    string
}

// NewCreateStartupScriptParam return new CreateStartupScriptParam
func NewCreateStartupScriptParam() *CreateStartupScriptParam {
	return &CreateStartupScriptParam{}
}

// Validate checks current values in model
func (p *CreateStartupScriptParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *CreateStartupScriptParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateStartupScriptParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateStartupScriptParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateStartupScriptParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateStartupScriptParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateStartupScriptParam) SetScript(v string) {
	p.Script = v
}

func (p *CreateStartupScriptParam) GetScript() string {
	return p.Script
}
func (p *CreateStartupScriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *CreateStartupScriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *CreateStartupScriptParam) SetName(v string) {
	p.Name = v
}

func (p *CreateStartupScriptParam) GetName() string {
	return p.Name
}
func (p *CreateStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *CreateStartupScriptParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateStartupScriptParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *CreateStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *CreateStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadStartupScriptParam is input parameters for the sacloud API
type ReadStartupScriptParam struct {
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewReadStartupScriptParam return new ReadStartupScriptParam
func NewReadStartupScriptParam() *ReadStartupScriptParam {
	return &ReadStartupScriptParam{}
}

// Validate checks current values in model
func (p *ReadStartupScriptParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *ReadStartupScriptParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadStartupScriptParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadStartupScriptParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadStartupScriptParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadStartupScriptParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *ReadStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *ReadStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadStartupScriptParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadStartupScriptParam) GetId() int64 {
	return p.Id
}

// UpdateStartupScriptParam is input parameters for the sacloud API
type UpdateStartupScriptParam struct {
	Script        string
	ScriptContent string
	Name          string
	Tags          []string
	IconId        int64
	Assumeyes     bool
	OutputType    string
	Column        []string
	Quiet         bool
	Format        string
	FormatFile    string
	Id            int64
}

// NewUpdateStartupScriptParam return new UpdateStartupScriptParam
func NewUpdateStartupScriptParam() *UpdateStartupScriptParam {
	return &UpdateStartupScriptParam{}
}

// Validate checks current values in model
func (p *UpdateStartupScriptParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["script"].ValidateFunc
		errs := validator("--script", p.Script)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--script-content", p.ScriptContent, map[string]interface{}{

			"--script": p.Script,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["StartupScript"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *UpdateStartupScriptParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateStartupScriptParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateStartupScriptParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateStartupScriptParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateStartupScriptParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateStartupScriptParam) SetScript(v string) {
	p.Script = v
}

func (p *UpdateStartupScriptParam) GetScript() string {
	return p.Script
}
func (p *UpdateStartupScriptParam) SetScriptContent(v string) {
	p.ScriptContent = v
}

func (p *UpdateStartupScriptParam) GetScriptContent() string {
	return p.ScriptContent
}
func (p *UpdateStartupScriptParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateStartupScriptParam) GetName() string {
	return p.Name
}
func (p *UpdateStartupScriptParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateStartupScriptParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateStartupScriptParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateStartupScriptParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *UpdateStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateStartupScriptParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateStartupScriptParam) GetId() int64 {
	return p.Id
}

// DeleteStartupScriptParam is input parameters for the sacloud API
type DeleteStartupScriptParam struct {
	Assumeyes  bool
	OutputType string
	Column     []string
	Quiet      bool
	Format     string
	FormatFile string
	Id         int64
}

// NewDeleteStartupScriptParam return new DeleteStartupScriptParam
func NewDeleteStartupScriptParam() *DeleteStartupScriptParam {
	return &DeleteStartupScriptParam{}
}

// Validate checks current values in model
func (p *DeleteStartupScriptParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteStartupScriptParam) GetResourceDef() *schema.Resource {
	return define.Resources["StartupScript"]
}

func (p *DeleteStartupScriptParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteStartupScriptParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteStartupScriptParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteStartupScriptParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteStartupScriptParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteStartupScriptParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteStartupScriptParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteStartupScriptParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteStartupScriptParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteStartupScriptParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteStartupScriptParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteStartupScriptParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteStartupScriptParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteStartupScriptParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteStartupScriptParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteStartupScriptParam) GetFormat() string {
	return p.Format
}
func (p *DeleteStartupScriptParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteStartupScriptParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteStartupScriptParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteStartupScriptParam) GetId() int64 {
	return p.Id
}
