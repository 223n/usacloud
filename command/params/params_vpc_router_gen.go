// Code generated by 'github.com/sacloud/usacloud/tools/gen-input-models'; DO NOT EDIT

package params

import (
	"github.com/sacloud/usacloud/define"
	"github.com/sacloud/usacloud/output"
	"github.com/sacloud/usacloud/schema"
)

// ListVPCRouterParam is input parameters for the sacloud API
type ListVPCRouterParam struct {
	Name              []string
	Id                []int64
	Tags              []string
	From              int
	Max               int
	Sort              []string
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewListVPCRouterParam return new ListVPCRouterParam
func NewListVPCRouterParam() *ListVPCRouterParam {
	return &ListVPCRouterParam{}
}

// Validate checks current values in model
func (p *ListVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		errs := validateConflicts("--name", p.Name, map[string]interface{}{

			"--id": p.Id,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["id"].ValidateFunc
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateConflicts("--id", p.Id, map[string]interface{}{

			"--name": p.Name,
		})
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["list"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ListVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ListVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["list"]
}

func (p *ListVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ListVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ListVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ListVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ListVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *ListVPCRouterParam) SetName(v []string) {
	p.Name = v
}

func (p *ListVPCRouterParam) GetName() []string {
	return p.Name
}
func (p *ListVPCRouterParam) SetId(v []int64) {
	p.Id = v
}

func (p *ListVPCRouterParam) GetId() []int64 {
	return p.Id
}
func (p *ListVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *ListVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *ListVPCRouterParam) SetFrom(v int) {
	p.From = v
}

func (p *ListVPCRouterParam) GetFrom() int {
	return p.From
}
func (p *ListVPCRouterParam) SetMax(v int) {
	p.Max = v
}

func (p *ListVPCRouterParam) GetMax() int {
	return p.Max
}
func (p *ListVPCRouterParam) SetSort(v []string) {
	p.Sort = v
}

func (p *ListVPCRouterParam) GetSort() []string {
	return p.Sort
}
func (p *ListVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ListVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ListVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ListVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ListVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ListVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ListVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ListVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *ListVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ListVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ListVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ListVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *ListVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ListVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}

// CreateVPCRouterParam is input parameters for the sacloud API
type CreateVPCRouterParam struct {
	Plan              string
	SwitchId          int64
	Vrid              int
	Vip               string
	Ipaddress1        string
	Ipaddress2        string
	BootAfterCreate   bool
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
}

// NewCreateVPCRouterParam return new CreateVPCRouterParam
func NewCreateVPCRouterParam() *CreateVPCRouterParam {
	return &CreateVPCRouterParam{

		Plan: "standard",

		Vrid: 1,
	}
}

// Validate checks current values in model
func (p *CreateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["plan"].ValidateFunc
		errs := validator("--plan", p.Plan)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--vrid", p.Vrid)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["vip"].ValidateFunc
		errs := validator("--vip", p.Vip)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["create"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *CreateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *CreateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["create"]
}

func (p *CreateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *CreateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *CreateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *CreateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *CreateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *CreateVPCRouterParam) SetPlan(v string) {
	p.Plan = v
}

func (p *CreateVPCRouterParam) GetPlan() string {
	return p.Plan
}
func (p *CreateVPCRouterParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *CreateVPCRouterParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *CreateVPCRouterParam) SetVrid(v int) {
	p.Vrid = v
}

func (p *CreateVPCRouterParam) GetVrid() int {
	return p.Vrid
}
func (p *CreateVPCRouterParam) SetVip(v string) {
	p.Vip = v
}

func (p *CreateVPCRouterParam) GetVip() string {
	return p.Vip
}
func (p *CreateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *CreateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *CreateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *CreateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *CreateVPCRouterParam) SetBootAfterCreate(v bool) {
	p.BootAfterCreate = v
}

func (p *CreateVPCRouterParam) GetBootAfterCreate() bool {
	return p.BootAfterCreate
}
func (p *CreateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *CreateVPCRouterParam) GetName() string {
	return p.Name
}
func (p *CreateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *CreateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *CreateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *CreateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *CreateVPCRouterParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *CreateVPCRouterParam) GetIconId() int64 {
	return p.IconId
}
func (p *CreateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *CreateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *CreateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *CreateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *CreateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *CreateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *CreateVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *CreateVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *CreateVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *CreateVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *CreateVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *CreateVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *CreateVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *CreateVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *CreateVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *CreateVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}

// ReadVPCRouterParam is input parameters for the sacloud API
type ReadVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewReadVPCRouterParam return new ReadVPCRouterParam
func NewReadVPCRouterParam() *ReadVPCRouterParam {
	return &ReadVPCRouterParam{}
}

// Validate checks current values in model
func (p *ReadVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ReadVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ReadVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["read"]
}

func (p *ReadVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ReadVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ReadVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ReadVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ReadVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *ReadVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ReadVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ReadVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ReadVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ReadVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *ReadVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *ReadVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *ReadVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *ReadVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *ReadVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *ReadVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *ReadVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *ReadVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *ReadVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *ReadVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *ReadVPCRouterParam) GetId() int64 {
	return p.Id
}

// UpdateVPCRouterParam is input parameters for the sacloud API
type UpdateVPCRouterParam struct {
	SyslogHost        string
	Name              string
	Description       string
	Tags              []string
	IconId            int64
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewUpdateVPCRouterParam return new UpdateVPCRouterParam
func NewUpdateVPCRouterParam() *UpdateVPCRouterParam {
	return &UpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *UpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["syslog-host"].ValidateFunc
		errs := validator("--syslog-host", p.SyslogHost)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["name"].ValidateFunc
		errs := validator("--name", p.Name)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["tags"].ValidateFunc
		errs := validator("--tags", p.Tags)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["update"].Params["icon-id"].ValidateFunc
		errs := validator("--icon-id", p.IconId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["update"]
}

func (p *UpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *UpdateVPCRouterParam) SetSyslogHost(v string) {
	p.SyslogHost = v
}

func (p *UpdateVPCRouterParam) GetSyslogHost() string {
	return p.SyslogHost
}
func (p *UpdateVPCRouterParam) SetName(v string) {
	p.Name = v
}

func (p *UpdateVPCRouterParam) GetName() string {
	return p.Name
}
func (p *UpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *UpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *UpdateVPCRouterParam) SetTags(v []string) {
	p.Tags = v
}

func (p *UpdateVPCRouterParam) GetTags() []string {
	return p.Tags
}
func (p *UpdateVPCRouterParam) SetIconId(v int64) {
	p.IconId = v
}

func (p *UpdateVPCRouterParam) GetIconId() int64 {
	return p.IconId
}
func (p *UpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UpdateVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UpdateVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UpdateVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UpdateVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *UpdateVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UpdateVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UpdateVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UpdateVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *UpdateVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UpdateVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *UpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// DeleteVPCRouterParam is input parameters for the sacloud API
type DeleteVPCRouterParam struct {
	Force             bool
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewDeleteVPCRouterParam return new DeleteVPCRouterParam
func NewDeleteVPCRouterParam() *DeleteVPCRouterParam {
	return &DeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *DeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["delete"]
}

func (p *DeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DeleteVPCRouterParam) SetForce(v bool) {
	p.Force = v
}

func (p *DeleteVPCRouterParam) GetForce() bool {
	return p.Force
}
func (p *DeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DeleteVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DeleteVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DeleteVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DeleteVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DeleteVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DeleteVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DeleteVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DeleteVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DeleteVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DeleteVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// BootVPCRouterParam is input parameters for the sacloud API
type BootVPCRouterParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewBootVPCRouterParam return new BootVPCRouterParam
func NewBootVPCRouterParam() *BootVPCRouterParam {
	return &BootVPCRouterParam{}
}

// Validate checks current values in model
func (p *BootVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *BootVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *BootVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["boot"]
}

func (p *BootVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *BootVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *BootVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *BootVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *BootVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *BootVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *BootVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *BootVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *BootVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *BootVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *BootVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *BootVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *BootVPCRouterParam) GetId() int64 {
	return p.Id
}

// ShutdownVPCRouterParam is input parameters for the sacloud API
type ShutdownVPCRouterParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewShutdownVPCRouterParam return new ShutdownVPCRouterParam
func NewShutdownVPCRouterParam() *ShutdownVPCRouterParam {
	return &ShutdownVPCRouterParam{}
}

// Validate checks current values in model
func (p *ShutdownVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown"]
}

func (p *ShutdownVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownVPCRouterParam) GetId() int64 {
	return p.Id
}

// ShutdownForceVPCRouterParam is input parameters for the sacloud API
type ShutdownForceVPCRouterParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewShutdownForceVPCRouterParam return new ShutdownForceVPCRouterParam
func NewShutdownForceVPCRouterParam() *ShutdownForceVPCRouterParam {
	return &ShutdownForceVPCRouterParam{}
}

// Validate checks current values in model
func (p *ShutdownForceVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ShutdownForceVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ShutdownForceVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["shutdown-force"]
}

func (p *ShutdownForceVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ShutdownForceVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ShutdownForceVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ShutdownForceVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ShutdownForceVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *ShutdownForceVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ShutdownForceVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ShutdownForceVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ShutdownForceVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ShutdownForceVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ShutdownForceVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ShutdownForceVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *ShutdownForceVPCRouterParam) GetId() int64 {
	return p.Id
}

// ResetVPCRouterParam is input parameters for the sacloud API
type ResetVPCRouterParam struct {
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewResetVPCRouterParam return new ResetVPCRouterParam
func NewResetVPCRouterParam() *ResetVPCRouterParam {
	return &ResetVPCRouterParam{}
}

// Validate checks current values in model
func (p *ResetVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *ResetVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *ResetVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["reset"]
}

func (p *ResetVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *ResetVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *ResetVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *ResetVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *ResetVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *ResetVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *ResetVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *ResetVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *ResetVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *ResetVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *ResetVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *ResetVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *ResetVPCRouterParam) GetId() int64 {
	return p.Id
}

// WaitForBootVPCRouterParam is input parameters for the sacloud API
type WaitForBootVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewWaitForBootVPCRouterParam return new WaitForBootVPCRouterParam
func NewWaitForBootVPCRouterParam() *WaitForBootVPCRouterParam {
	return &WaitForBootVPCRouterParam{}
}

// Validate checks current values in model
func (p *WaitForBootVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForBootVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForBootVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-boot"]
}

func (p *WaitForBootVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForBootVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForBootVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForBootVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForBootVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForBootVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForBootVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForBootVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForBootVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForBootVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForBootVPCRouterParam) GetId() int64 {
	return p.Id
}

// WaitForDownVPCRouterParam is input parameters for the sacloud API
type WaitForDownVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewWaitForDownVPCRouterParam return new WaitForDownVPCRouterParam
func NewWaitForDownVPCRouterParam() *WaitForDownVPCRouterParam {
	return &WaitForDownVPCRouterParam{}
}

// Validate checks current values in model
func (p *WaitForDownVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *WaitForDownVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *WaitForDownVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["wait-for-down"]
}

func (p *WaitForDownVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *WaitForDownVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *WaitForDownVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *WaitForDownVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *WaitForDownVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *WaitForDownVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *WaitForDownVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *WaitForDownVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *WaitForDownVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *WaitForDownVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *WaitForDownVPCRouterParam) GetId() int64 {
	return p.Id
}

// InterfaceInfoVPCRouterParam is input parameters for the sacloud API
type InterfaceInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewInterfaceInfoVPCRouterParam return new InterfaceInfoVPCRouterParam
func NewInterfaceInfoVPCRouterParam() *InterfaceInfoVPCRouterParam {
	return &InterfaceInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *InterfaceInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-info"]
}

func (p *InterfaceInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *InterfaceInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *InterfaceInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *InterfaceInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *InterfaceInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *InterfaceInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *InterfaceInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *InterfaceInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *InterfaceInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *InterfaceInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *InterfaceInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// InterfaceConnectVPCRouterParam is input parameters for the sacloud API
type InterfaceConnectVPCRouterParam struct {
	Index             string
	Ipaddress         string
	WithReboot        bool
	Ipaddress1        string
	SwitchId          int64
	Ipaddress2        string
	NwMasklen         int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewInterfaceConnectVPCRouterParam return new InterfaceConnectVPCRouterParam
func NewInterfaceConnectVPCRouterParam() *InterfaceConnectVPCRouterParam {
	return &InterfaceConnectVPCRouterParam{

		NwMasklen: 24,
	}
}

// Validate checks current values in model
func (p *InterfaceConnectVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-connect"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceConnectVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceConnectVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-connect"]
}

func (p *InterfaceConnectVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceConnectVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceConnectVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceConnectVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceConnectVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceConnectVPCRouterParam) SetIndex(v string) {
	p.Index = v
}

func (p *InterfaceConnectVPCRouterParam) GetIndex() string {
	return p.Index
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceConnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceConnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceConnectVPCRouterParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *InterfaceConnectVPCRouterParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *InterfaceConnectVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceConnectVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceConnectVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceConnectVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceConnectVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceConnectVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceConnectVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceConnectVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceConnectVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceConnectVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceConnectVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceConnectVPCRouterParam) GetId() int64 {
	return p.Id
}

// InterfaceUpdateVPCRouterParam is input parameters for the sacloud API
type InterfaceUpdateVPCRouterParam struct {
	Index             string
	Ipaddress         string
	WithReboot        bool
	Ipaddress1        string
	SwitchId          int64
	Ipaddress2        string
	Alias             []string
	NwMasklen         int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewInterfaceUpdateVPCRouterParam return new InterfaceUpdateVPCRouterParam
func NewInterfaceUpdateVPCRouterParam() *InterfaceUpdateVPCRouterParam {
	return &InterfaceUpdateVPCRouterParam{

		NwMasklen: 24,
	}
}

// Validate checks current values in model
func (p *InterfaceUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress1"].ValidateFunc
		errs := validator("--ipaddress1", p.Ipaddress1)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["switch-id"].ValidateFunc
		errs := validator("--switch-id", p.SwitchId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["ipaddress2"].ValidateFunc
		errs := validator("--ipaddress2", p.Ipaddress2)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["alias"].ValidateFunc
		errs := validator("--alias", p.Alias)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-update"].Params["nw-masklen"].ValidateFunc
		errs := validator("--nw-masklen", p.NwMasklen)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-update"]
}

func (p *InterfaceUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceUpdateVPCRouterParam) SetIndex(v string) {
	p.Index = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIndex() string {
	return p.Index
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *InterfaceUpdateVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceUpdateVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress1(v string) {
	p.Ipaddress1 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress1() string {
	return p.Ipaddress1
}
func (p *InterfaceUpdateVPCRouterParam) SetSwitchId(v int64) {
	p.SwitchId = v
}

func (p *InterfaceUpdateVPCRouterParam) GetSwitchId() int64 {
	return p.SwitchId
}
func (p *InterfaceUpdateVPCRouterParam) SetIpaddress2(v string) {
	p.Ipaddress2 = v
}

func (p *InterfaceUpdateVPCRouterParam) GetIpaddress2() string {
	return p.Ipaddress2
}
func (p *InterfaceUpdateVPCRouterParam) SetAlias(v []string) {
	p.Alias = v
}

func (p *InterfaceUpdateVPCRouterParam) GetAlias() []string {
	return p.Alias
}
func (p *InterfaceUpdateVPCRouterParam) SetNwMasklen(v int) {
	p.NwMasklen = v
}

func (p *InterfaceUpdateVPCRouterParam) GetNwMasklen() int {
	return p.NwMasklen
}
func (p *InterfaceUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// InterfaceDisconnectVPCRouterParam is input parameters for the sacloud API
type InterfaceDisconnectVPCRouterParam struct {
	Index             string
	WithReboot        bool
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewInterfaceDisconnectVPCRouterParam return new InterfaceDisconnectVPCRouterParam
func NewInterfaceDisconnectVPCRouterParam() *InterfaceDisconnectVPCRouterParam {
	return &InterfaceDisconnectVPCRouterParam{}
}

// Validate checks current values in model
func (p *InterfaceDisconnectVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["interface-disconnect"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *InterfaceDisconnectVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *InterfaceDisconnectVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["interface-disconnect"]
}

func (p *InterfaceDisconnectVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *InterfaceDisconnectVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *InterfaceDisconnectVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *InterfaceDisconnectVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *InterfaceDisconnectVPCRouterParam) SetIndex(v string) {
	p.Index = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetIndex() string {
	return p.Index
}
func (p *InterfaceDisconnectVPCRouterParam) SetWithReboot(v bool) {
	p.WithReboot = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetWithReboot() bool {
	return p.WithReboot
}
func (p *InterfaceDisconnectVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *InterfaceDisconnectVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *InterfaceDisconnectVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *InterfaceDisconnectVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *InterfaceDisconnectVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticNatInfoVPCRouterParam is input parameters for the sacloud API
type StaticNatInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewStaticNatInfoVPCRouterParam return new StaticNatInfoVPCRouterParam
func NewStaticNatInfoVPCRouterParam() *StaticNatInfoVPCRouterParam {
	return &StaticNatInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticNatInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-info"]
}

func (p *StaticNatInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticNatInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticNatInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticNatInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticNatInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticNatInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticNatInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticNatInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticNatInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticNatInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticNatInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticNatInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticNatInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticNatAddVPCRouterParam is input parameters for the sacloud API
type StaticNatAddVPCRouterParam struct {
	Global            string
	Private           string
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticNatAddVPCRouterParam return new StaticNatAddVPCRouterParam
func NewStaticNatAddVPCRouterParam() *StaticNatAddVPCRouterParam {
	return &StaticNatAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticNatAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-add"]
}

func (p *StaticNatAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticNatAddVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatAddVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatAddVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatAddVPCRouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticNatAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticNatUpdateVPCRouterParam is input parameters for the sacloud API
type StaticNatUpdateVPCRouterParam struct {
	Index             int
	Global            string
	Private           string
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticNatUpdateVPCRouterParam return new StaticNatUpdateVPCRouterParam
func NewStaticNatUpdateVPCRouterParam() *StaticNatUpdateVPCRouterParam {
	return &StaticNatUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticNatUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["global"].ValidateFunc
		errs := validator("--global", p.Global)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["private"].ValidateFunc
		errs := validator("--private", p.Private)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-nat-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-update"]
}

func (p *StaticNatUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticNatUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatUpdateVPCRouterParam) SetGlobal(v string) {
	p.Global = v
}

func (p *StaticNatUpdateVPCRouterParam) GetGlobal() string {
	return p.Global
}
func (p *StaticNatUpdateVPCRouterParam) SetPrivate(v string) {
	p.Private = v
}

func (p *StaticNatUpdateVPCRouterParam) GetPrivate() string {
	return p.Private
}
func (p *StaticNatUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *StaticNatUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *StaticNatUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticNatUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticNatDeleteVPCRouterParam is input parameters for the sacloud API
type StaticNatDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticNatDeleteVPCRouterParam return new StaticNatDeleteVPCRouterParam
func NewStaticNatDeleteVPCRouterParam() *StaticNatDeleteVPCRouterParam {
	return &StaticNatDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticNatDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticNatDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticNatDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-nat-delete"]
}

func (p *StaticNatDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticNatDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticNatDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticNatDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticNatDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticNatDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticNatDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticNatDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticNatDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticNatDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticNatDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticNatDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticNatDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticNatDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// PortForwardingInfoVPCRouterParam is input parameters for the sacloud API
type PortForwardingInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewPortForwardingInfoVPCRouterParam return new PortForwardingInfoVPCRouterParam
func NewPortForwardingInfoVPCRouterParam() *PortForwardingInfoVPCRouterParam {
	return &PortForwardingInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *PortForwardingInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-info"]
}

func (p *PortForwardingInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PortForwardingInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PortForwardingInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PortForwardingInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PortForwardingInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *PortForwardingInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PortForwardingInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PortForwardingInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PortForwardingInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *PortForwardingInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PortForwardingInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PortForwardingInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PortForwardingInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// PortForwardingAddVPCRouterParam is input parameters for the sacloud API
type PortForwardingAddVPCRouterParam struct {
	Protocol          string
	GlobalPort        int
	PrivateIpaddress  string
	PrivatePort       int
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewPortForwardingAddVPCRouterParam return new PortForwardingAddVPCRouterParam
func NewPortForwardingAddVPCRouterParam() *PortForwardingAddVPCRouterParam {
	return &PortForwardingAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *PortForwardingAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-add"]
}

func (p *PortForwardingAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PortForwardingAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingAddVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingAddVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingAddVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingAddVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingAddVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PortForwardingAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// PortForwardingUpdateVPCRouterParam is input parameters for the sacloud API
type PortForwardingUpdateVPCRouterParam struct {
	Index             int
	Protocol          string
	GlobalPort        int
	PrivateIpaddress  string
	PrivatePort       int
	Description       string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewPortForwardingUpdateVPCRouterParam return new PortForwardingUpdateVPCRouterParam
func NewPortForwardingUpdateVPCRouterParam() *PortForwardingUpdateVPCRouterParam {
	return &PortForwardingUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *PortForwardingUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["global-port"].ValidateFunc
		errs := validator("--global-port", p.GlobalPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-ipaddress"].ValidateFunc
		errs := validator("--private-ipaddress", p.PrivateIpaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["private-port"].ValidateFunc
		errs := validator("--private-port", p.PrivatePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["port-forwarding-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-update"]
}

func (p *PortForwardingUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PortForwardingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *PortForwardingUpdateVPCRouterParam) SetGlobalPort(v int) {
	p.GlobalPort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetGlobalPort() int {
	return p.GlobalPort
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivateIpaddress(v string) {
	p.PrivateIpaddress = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivateIpaddress() string {
	return p.PrivateIpaddress
}
func (p *PortForwardingUpdateVPCRouterParam) SetPrivatePort(v int) {
	p.PrivatePort = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetPrivatePort() int {
	return p.PrivatePort
}
func (p *PortForwardingUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *PortForwardingUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PortForwardingUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// PortForwardingDeleteVPCRouterParam is input parameters for the sacloud API
type PortForwardingDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewPortForwardingDeleteVPCRouterParam return new PortForwardingDeleteVPCRouterParam
func NewPortForwardingDeleteVPCRouterParam() *PortForwardingDeleteVPCRouterParam {
	return &PortForwardingDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *PortForwardingDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PortForwardingDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PortForwardingDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["port-forwarding-delete"]
}

func (p *PortForwardingDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PortForwardingDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PortForwardingDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PortForwardingDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PortForwardingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *PortForwardingDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PortForwardingDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PortForwardingDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PortForwardingDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PortForwardingDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// FirewallInfoVPCRouterParam is input parameters for the sacloud API
type FirewallInfoVPCRouterParam struct {
	Direction         string
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewFirewallInfoVPCRouterParam return new FirewallInfoVPCRouterParam
func NewFirewallInfoVPCRouterParam() *FirewallInfoVPCRouterParam {
	return &FirewallInfoVPCRouterParam{

		Direction: "receive",
	}
}

// Validate checks current values in model
func (p *FirewallInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-info"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-info"]
}

func (p *FirewallInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *FirewallInfoVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallInfoVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *FirewallInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *FirewallInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *FirewallInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *FirewallInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *FirewallInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *FirewallInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *FirewallInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *FirewallInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *FirewallInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *FirewallInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *FirewallInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// FirewallAddVPCRouterParam is input parameters for the sacloud API
type FirewallAddVPCRouterParam struct {
	Direction          string
	Protocol           string
	SourceNetwork      string
	SourcePort         int
	DestinationNetwork string
	DestinationPort    int
	Action             string
	EnableLogging      bool
	Description        string
	Assumeyes          bool
	ParamTemplate      string
	ParamTemplateFile  string
	Id                 int64
}

// NewFirewallAddVPCRouterParam return new FirewallAddVPCRouterParam
func NewFirewallAddVPCRouterParam() *FirewallAddVPCRouterParam {
	return &FirewallAddVPCRouterParam{

		Direction: "receive",

		Action: "deny",
	}
}

// Validate checks current values in model
func (p *FirewallAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-add"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-add"]
}

func (p *FirewallAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *FirewallAddVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallAddVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallAddVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallAddVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallAddVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallAddVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallAddVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallAddVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallAddVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallAddVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallAddVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallAddVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallAddVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallAddVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallAddVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallAddVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *FirewallAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// FirewallUpdateVPCRouterParam is input parameters for the sacloud API
type FirewallUpdateVPCRouterParam struct {
	Direction          string
	Index              int
	Protocol           string
	SourceNetwork      string
	SourcePort         int
	DestinationNetwork string
	DestinationPort    int
	Action             string
	EnableLogging      bool
	Description        string
	Assumeyes          bool
	ParamTemplate      string
	ParamTemplateFile  string
	Id                 int64
}

// NewFirewallUpdateVPCRouterParam return new FirewallUpdateVPCRouterParam
func NewFirewallUpdateVPCRouterParam() *FirewallUpdateVPCRouterParam {
	return &FirewallUpdateVPCRouterParam{

		Direction: "receive",

		Action: "deny",
	}
}

// Validate checks current values in model
func (p *FirewallUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["protocol"].ValidateFunc
		errs := validator("--protocol", p.Protocol)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-network"].ValidateFunc
		errs := validator("--source-network", p.SourceNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["source-port"].ValidateFunc
		errs := validator("--source-port", p.SourcePort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-network"].ValidateFunc
		errs := validator("--destination-network", p.DestinationNetwork)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["destination-port"].ValidateFunc
		errs := validator("--destination-port", p.DestinationPort)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["action"].ValidateFunc
		errs := validator("--action", p.Action)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-update"].Params["description"].ValidateFunc
		errs := validator("--description", p.Description)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-update"]
}

func (p *FirewallUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *FirewallUpdateVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallUpdateVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallUpdateVPCRouterParam) SetProtocol(v string) {
	p.Protocol = v
}

func (p *FirewallUpdateVPCRouterParam) GetProtocol() string {
	return p.Protocol
}
func (p *FirewallUpdateVPCRouterParam) SetSourceNetwork(v string) {
	p.SourceNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourceNetwork() string {
	return p.SourceNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetSourcePort(v int) {
	p.SourcePort = v
}

func (p *FirewallUpdateVPCRouterParam) GetSourcePort() int {
	return p.SourcePort
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationNetwork(v string) {
	p.DestinationNetwork = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationNetwork() string {
	return p.DestinationNetwork
}
func (p *FirewallUpdateVPCRouterParam) SetDestinationPort(v int) {
	p.DestinationPort = v
}

func (p *FirewallUpdateVPCRouterParam) GetDestinationPort() int {
	return p.DestinationPort
}
func (p *FirewallUpdateVPCRouterParam) SetAction(v string) {
	p.Action = v
}

func (p *FirewallUpdateVPCRouterParam) GetAction() string {
	return p.Action
}
func (p *FirewallUpdateVPCRouterParam) SetEnableLogging(v bool) {
	p.EnableLogging = v
}

func (p *FirewallUpdateVPCRouterParam) GetEnableLogging() bool {
	return p.EnableLogging
}
func (p *FirewallUpdateVPCRouterParam) SetDescription(v string) {
	p.Description = v
}

func (p *FirewallUpdateVPCRouterParam) GetDescription() string {
	return p.Description
}
func (p *FirewallUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *FirewallUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// FirewallDeleteVPCRouterParam is input parameters for the sacloud API
type FirewallDeleteVPCRouterParam struct {
	Direction         string
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewFirewallDeleteVPCRouterParam return new FirewallDeleteVPCRouterParam
func NewFirewallDeleteVPCRouterParam() *FirewallDeleteVPCRouterParam {
	return &FirewallDeleteVPCRouterParam{

		Direction: "receive",
	}
}

// Validate checks current values in model
func (p *FirewallDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["firewall-delete"].Params["direction"].ValidateFunc
		errs := validator("--direction", p.Direction)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *FirewallDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *FirewallDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["firewall-delete"]
}

func (p *FirewallDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *FirewallDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *FirewallDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *FirewallDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *FirewallDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *FirewallDeleteVPCRouterParam) SetDirection(v string) {
	p.Direction = v
}

func (p *FirewallDeleteVPCRouterParam) GetDirection() string {
	return p.Direction
}
func (p *FirewallDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *FirewallDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *FirewallDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *FirewallDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *FirewallDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *FirewallDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *FirewallDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *FirewallDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *FirewallDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *FirewallDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpServerInfoVPCRouterParam is input parameters for the sacloud API
type DhcpServerInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewDhcpServerInfoVPCRouterParam return new DhcpServerInfoVPCRouterParam
func NewDhcpServerInfoVPCRouterParam() *DhcpServerInfoVPCRouterParam {
	return &DhcpServerInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-info"]
}

func (p *DhcpServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpServerInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpServerInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpServerAddVPCRouterParam is input parameters for the sacloud API
type DhcpServerAddVPCRouterParam struct {
	Index             int
	RangeStart        string
	RangeStop         string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpServerAddVPCRouterParam return new DhcpServerAddVPCRouterParam
func NewDhcpServerAddVPCRouterParam() *DhcpServerAddVPCRouterParam {
	return &DhcpServerAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpServerAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-add"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-add"]
}

func (p *DhcpServerAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpServerAddVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpServerAddVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerAddVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerAddVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpServerAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpServerUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpServerUpdateVPCRouterParam struct {
	Index             int
	RangeStart        string
	RangeStop         string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpServerUpdateVPCRouterParam return new DhcpServerUpdateVPCRouterParam
func NewDhcpServerUpdateVPCRouterParam() *DhcpServerUpdateVPCRouterParam {
	return &DhcpServerUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-update"]
}

func (p *DhcpServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpServerUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *DhcpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *DhcpServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpServerUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpServerDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpServerDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpServerDeleteVPCRouterParam return new DhcpServerDeleteVPCRouterParam
func NewDhcpServerDeleteVPCRouterParam() *DhcpServerDeleteVPCRouterParam {
	return &DhcpServerDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpServerDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-server-delete"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpServerDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpServerDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-server-delete"]
}

func (p *DhcpServerDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpServerDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpServerDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpServerDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpServerDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpServerDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpServerDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpServerDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpServerDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpServerDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpStaticMappingInfoVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewDhcpStaticMappingInfoVPCRouterParam return new DhcpStaticMappingInfoVPCRouterParam
func NewDhcpStaticMappingInfoVPCRouterParam() *DhcpStaticMappingInfoVPCRouterParam {
	return &DhcpStaticMappingInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpStaticMappingInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-info"]
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpStaticMappingInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *DhcpStaticMappingInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpStaticMappingInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpStaticMappingAddVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingAddVPCRouterParam struct {
	Macaddress        string
	Ipaddress         string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpStaticMappingAddVPCRouterParam return new DhcpStaticMappingAddVPCRouterParam
func NewDhcpStaticMappingAddVPCRouterParam() *DhcpStaticMappingAddVPCRouterParam {
	return &DhcpStaticMappingAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpStaticMappingAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-add"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-add"]
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpStaticMappingAddVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpStaticMappingAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpStaticMappingUpdateVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingUpdateVPCRouterParam struct {
	Index             int
	Macaddress        string
	Ipaddress         string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpStaticMappingUpdateVPCRouterParam return new DhcpStaticMappingUpdateVPCRouterParam
func NewDhcpStaticMappingUpdateVPCRouterParam() *DhcpStaticMappingUpdateVPCRouterParam {
	return &DhcpStaticMappingUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpStaticMappingUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["macaddress"].ValidateFunc
		errs := validator("--macaddress", p.Macaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["dhcp-static-mapping-update"].Params["ipaddress"].ValidateFunc
		errs := validator("--ipaddress", p.Ipaddress)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-update"]
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetMacaddress(v string) {
	p.Macaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetMacaddress() string {
	return p.Macaddress
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetIpaddress(v string) {
	p.Ipaddress = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetIpaddress() string {
	return p.Ipaddress
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpStaticMappingUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// DhcpStaticMappingDeleteVPCRouterParam is input parameters for the sacloud API
type DhcpStaticMappingDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewDhcpStaticMappingDeleteVPCRouterParam return new DhcpStaticMappingDeleteVPCRouterParam
func NewDhcpStaticMappingDeleteVPCRouterParam() *DhcpStaticMappingDeleteVPCRouterParam {
	return &DhcpStaticMappingDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *DhcpStaticMappingDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["dhcp-static-mapping-delete"]
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *DhcpStaticMappingDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *DhcpStaticMappingDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// PptpServerInfoVPCRouterParam is input parameters for the sacloud API
type PptpServerInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewPptpServerInfoVPCRouterParam return new PptpServerInfoVPCRouterParam
func NewPptpServerInfoVPCRouterParam() *PptpServerInfoVPCRouterParam {
	return &PptpServerInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *PptpServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-info"]
}

func (p *PptpServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PptpServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *PptpServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *PptpServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *PptpServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *PptpServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *PptpServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *PptpServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *PptpServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *PptpServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *PptpServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *PptpServerInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PptpServerInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// PptpServerUpdateVPCRouterParam is input parameters for the sacloud API
type PptpServerUpdateVPCRouterParam struct {
	Enabled           string
	RangeStart        string
	RangeStop         string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewPptpServerUpdateVPCRouterParam return new PptpServerUpdateVPCRouterParam
func NewPptpServerUpdateVPCRouterParam() *PptpServerUpdateVPCRouterParam {
	return &PptpServerUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *PptpServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--enabled", p.Enabled)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["enabled"].ValidateFunc
		errs := validator("--enabled", p.Enabled)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["pptp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *PptpServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *PptpServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["pptp-server-update"]
}

func (p *PptpServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *PptpServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *PptpServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *PptpServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *PptpServerUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *PptpServerUpdateVPCRouterParam) SetEnabled(v string) {
	p.Enabled = v
}

func (p *PptpServerUpdateVPCRouterParam) GetEnabled() string {
	return p.Enabled
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *PptpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *PptpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *PptpServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *PptpServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *PptpServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *PptpServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *PptpServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *PptpServerUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *PptpServerUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// L2tpServerInfoVPCRouterParam is input parameters for the sacloud API
type L2tpServerInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewL2tpServerInfoVPCRouterParam return new L2tpServerInfoVPCRouterParam
func NewL2tpServerInfoVPCRouterParam() *L2tpServerInfoVPCRouterParam {
	return &L2tpServerInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *L2tpServerInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2tpServerInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-info"]
}

func (p *L2tpServerInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2tpServerInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2tpServerInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2tpServerInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2tpServerInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *L2tpServerInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2tpServerInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2tpServerInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2tpServerInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2tpServerInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *L2tpServerInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *L2tpServerInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *L2tpServerInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *L2tpServerInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *L2tpServerInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *L2tpServerInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *L2tpServerInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *L2tpServerInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *L2tpServerInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *L2tpServerInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *L2tpServerInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// L2tpServerUpdateVPCRouterParam is input parameters for the sacloud API
type L2tpServerUpdateVPCRouterParam struct {
	Enabled           string
	RangeStart        string
	RangeStop         string
	PreSharedSecret   string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewL2tpServerUpdateVPCRouterParam return new L2tpServerUpdateVPCRouterParam
func NewL2tpServerUpdateVPCRouterParam() *L2tpServerUpdateVPCRouterParam {
	return &L2tpServerUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *L2tpServerUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--enabled", p.Enabled)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["enabled"].ValidateFunc
		errs := validator("--enabled", p.Enabled)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-start"].ValidateFunc
		errs := validator("--range-start", p.RangeStart)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["range-stop"].ValidateFunc
		errs := validator("--range-stop", p.RangeStop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["l2tp-server-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *L2tpServerUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *L2tpServerUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["l2tp-server-update"]
}

func (p *L2tpServerUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *L2tpServerUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *L2tpServerUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *L2tpServerUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *L2tpServerUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *L2tpServerUpdateVPCRouterParam) SetEnabled(v string) {
	p.Enabled = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetEnabled() string {
	return p.Enabled
}
func (p *L2tpServerUpdateVPCRouterParam) SetRangeStart(v string) {
	p.RangeStart = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetRangeStart() string {
	return p.RangeStart
}
func (p *L2tpServerUpdateVPCRouterParam) SetRangeStop(v string) {
	p.RangeStop = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetRangeStop() string {
	return p.RangeStop
}
func (p *L2tpServerUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *L2tpServerUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *L2tpServerUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *L2tpServerUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *L2tpServerUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *L2tpServerUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// UserInfoVPCRouterParam is input parameters for the sacloud API
type UserInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewUserInfoVPCRouterParam return new UserInfoVPCRouterParam
func NewUserInfoVPCRouterParam() *UserInfoVPCRouterParam {
	return &UserInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *UserInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-info"]
}

func (p *UserInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *UserInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *UserInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *UserInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *UserInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *UserInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *UserInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *UserInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *UserInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *UserInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *UserInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *UserInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *UserInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// UserAddVPCRouterParam is input parameters for the sacloud API
type UserAddVPCRouterParam struct {
	Username          string
	Password          string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewUserAddVPCRouterParam return new UserAddVPCRouterParam
func NewUserAddVPCRouterParam() *UserAddVPCRouterParam {
	return &UserAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *UserAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-add"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-add"]
}

func (p *UserAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *UserAddVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserAddVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserAddVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserAddVPCRouterParam) GetPassword() string {
	return p.Password
}
func (p *UserAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *UserAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// UserUpdateVPCRouterParam is input parameters for the sacloud API
type UserUpdateVPCRouterParam struct {
	Index             int
	Username          string
	Password          string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewUserUpdateVPCRouterParam return new UserUpdateVPCRouterParam
func NewUserUpdateVPCRouterParam() *UserUpdateVPCRouterParam {
	return &UserUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *UserUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["username"].ValidateFunc
		errs := validator("--username", p.Username)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["user-update"].Params["password"].ValidateFunc
		errs := validator("--password", p.Password)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-update"]
}

func (p *UserUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *UserUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *UserUpdateVPCRouterParam) SetUsername(v string) {
	p.Username = v
}

func (p *UserUpdateVPCRouterParam) GetUsername() string {
	return p.Username
}
func (p *UserUpdateVPCRouterParam) SetPassword(v string) {
	p.Password = v
}

func (p *UserUpdateVPCRouterParam) GetPassword() string {
	return p.Password
}
func (p *UserUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *UserUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// UserDeleteVPCRouterParam is input parameters for the sacloud API
type UserDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewUserDeleteVPCRouterParam return new UserDeleteVPCRouterParam
func NewUserDeleteVPCRouterParam() *UserDeleteVPCRouterParam {
	return &UserDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *UserDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *UserDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *UserDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["user-delete"]
}

func (p *UserDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *UserDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *UserDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *UserDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *UserDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *UserDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *UserDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *UserDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *UserDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *UserDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *UserDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *UserDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *UserDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *UserDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *UserDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// SiteToSiteVpnInfoVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVpnInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewSiteToSiteVpnInfoVPCRouterParam return new SiteToSiteVpnInfoVPCRouterParam
func NewSiteToSiteVpnInfoVPCRouterParam() *SiteToSiteVpnInfoVPCRouterParam {
	return &SiteToSiteVpnInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *SiteToSiteVpnInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-info"]
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *SiteToSiteVpnInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *SiteToSiteVpnInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *SiteToSiteVpnInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// SiteToSiteVpnAddVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVpnAddVPCRouterParam struct {
	Peer              string
	RemoteId          string
	PreSharedSecret   string
	Routes            []string
	LocalPrefix       []string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewSiteToSiteVpnAddVPCRouterParam return new SiteToSiteVpnAddVPCRouterParam
func NewSiteToSiteVpnAddVPCRouterParam() *SiteToSiteVpnAddVPCRouterParam {
	return &SiteToSiteVpnAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *SiteToSiteVpnAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--remote-id", p.RemoteId)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-add"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-add"]
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *SiteToSiteVpnAddVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *SiteToSiteVpnAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// SiteToSiteVpnUpdateVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVpnUpdateVPCRouterParam struct {
	Index             int
	Peer              string
	RemoteId          string
	PreSharedSecret   string
	Routes            []string
	LocalPrefix       []string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewSiteToSiteVpnUpdateVPCRouterParam return new SiteToSiteVpnUpdateVPCRouterParam
func NewSiteToSiteVpnUpdateVPCRouterParam() *SiteToSiteVpnUpdateVPCRouterParam {
	return &SiteToSiteVpnUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *SiteToSiteVpnUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["peer"].ValidateFunc
		errs := validator("--peer", p.Peer)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["pre-shared-secret"].ValidateFunc
		errs := validator("--pre-shared-secret", p.PreSharedSecret)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["routes"].ValidateFunc
		errs := validator("--routes", p.Routes)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["site-to-site-vpn-update"].Params["local-prefix"].ValidateFunc
		errs := validator("--local-prefix", p.LocalPrefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-update"]
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetPeer(v string) {
	p.Peer = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetPeer() string {
	return p.Peer
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetRemoteId(v string) {
	p.RemoteId = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetRemoteId() string {
	return p.RemoteId
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetPreSharedSecret(v string) {
	p.PreSharedSecret = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetPreSharedSecret() string {
	return p.PreSharedSecret
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetRoutes(v []string) {
	p.Routes = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetRoutes() []string {
	return p.Routes
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetLocalPrefix(v []string) {
	p.LocalPrefix = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetLocalPrefix() []string {
	return p.LocalPrefix
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *SiteToSiteVpnUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// SiteToSiteVpnDeleteVPCRouterParam is input parameters for the sacloud API
type SiteToSiteVpnDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewSiteToSiteVpnDeleteVPCRouterParam return new SiteToSiteVpnDeleteVPCRouterParam
func NewSiteToSiteVpnDeleteVPCRouterParam() *SiteToSiteVpnDeleteVPCRouterParam {
	return &SiteToSiteVpnDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *SiteToSiteVpnDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["site-to-site-vpn-delete"]
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *SiteToSiteVpnDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *SiteToSiteVpnDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *SiteToSiteVpnDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *SiteToSiteVpnDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *SiteToSiteVpnDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticRouteInfoVPCRouterParam is input parameters for the sacloud API
type StaticRouteInfoVPCRouterParam struct {
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewStaticRouteInfoVPCRouterParam return new StaticRouteInfoVPCRouterParam
func NewStaticRouteInfoVPCRouterParam() *StaticRouteInfoVPCRouterParam {
	return &StaticRouteInfoVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticRouteInfoVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteInfoVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteInfoVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-info"]
}

func (p *StaticRouteInfoVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteInfoVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteInfoVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteInfoVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteInfoVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticRouteInfoVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteInfoVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteInfoVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *StaticRouteInfoVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *StaticRouteInfoVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *StaticRouteInfoVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *StaticRouteInfoVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *StaticRouteInfoVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *StaticRouteInfoVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *StaticRouteInfoVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *StaticRouteInfoVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *StaticRouteInfoVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *StaticRouteInfoVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticRouteInfoVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticRouteAddVPCRouterParam is input parameters for the sacloud API
type StaticRouteAddVPCRouterParam struct {
	Prefix            string
	NextHop           string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticRouteAddVPCRouterParam return new StaticRouteAddVPCRouterParam
func NewStaticRouteAddVPCRouterParam() *StaticRouteAddVPCRouterParam {
	return &StaticRouteAddVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticRouteAddVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-add"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteAddVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteAddVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-add"]
}

func (p *StaticRouteAddVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteAddVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteAddVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteAddVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteAddVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticRouteAddVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteAddVPCRouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteAddVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteAddVPCRouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteAddVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteAddVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteAddVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteAddVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteAddVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteAddVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteAddVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticRouteAddVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticRouteUpdateVPCRouterParam is input parameters for the sacloud API
type StaticRouteUpdateVPCRouterParam struct {
	Index             int
	Prefix            string
	NextHop           string
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticRouteUpdateVPCRouterParam return new StaticRouteUpdateVPCRouterParam
func NewStaticRouteUpdateVPCRouterParam() *StaticRouteUpdateVPCRouterParam {
	return &StaticRouteUpdateVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticRouteUpdateVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["prefix"].ValidateFunc
		errs := validator("--prefix", p.Prefix)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["static-route-update"].Params["next-hop"].ValidateFunc
		errs := validator("--next-hop", p.NextHop)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteUpdateVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteUpdateVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-update"]
}

func (p *StaticRouteUpdateVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteUpdateVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteUpdateVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteUpdateVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticRouteUpdateVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteUpdateVPCRouterParam) SetPrefix(v string) {
	p.Prefix = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetPrefix() string {
	return p.Prefix
}
func (p *StaticRouteUpdateVPCRouterParam) SetNextHop(v string) {
	p.NextHop = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetNextHop() string {
	return p.NextHop
}
func (p *StaticRouteUpdateVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteUpdateVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteUpdateVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteUpdateVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticRouteUpdateVPCRouterParam) GetId() int64 {
	return p.Id
}

// StaticRouteDeleteVPCRouterParam is input parameters for the sacloud API
type StaticRouteDeleteVPCRouterParam struct {
	Index             int
	Assumeyes         bool
	ParamTemplate     string
	ParamTemplateFile string
	Id                int64
}

// NewStaticRouteDeleteVPCRouterParam return new StaticRouteDeleteVPCRouterParam
func NewStaticRouteDeleteVPCRouterParam() *StaticRouteDeleteVPCRouterParam {
	return &StaticRouteDeleteVPCRouterParam{}
}

// Validate checks current values in model
func (p *StaticRouteDeleteVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *StaticRouteDeleteVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *StaticRouteDeleteVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["static-route-delete"]
}

func (p *StaticRouteDeleteVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *StaticRouteDeleteVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *StaticRouteDeleteVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *StaticRouteDeleteVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *StaticRouteDeleteVPCRouterParam) SetIndex(v int) {
	p.Index = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetIndex() int {
	return p.Index
}
func (p *StaticRouteDeleteVPCRouterParam) SetAssumeyes(v bool) {
	p.Assumeyes = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetAssumeyes() bool {
	return p.Assumeyes
}
func (p *StaticRouteDeleteVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *StaticRouteDeleteVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *StaticRouteDeleteVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *StaticRouteDeleteVPCRouterParam) GetId() int64 {
	return p.Id
}

// MonitorVPCRouterParam is input parameters for the sacloud API
type MonitorVPCRouterParam struct {
	Index             string
	Start             string
	End               string
	KeyFormat         string
	ParamTemplate     string
	ParamTemplateFile string
	OutputType        string
	Column            []string
	Quiet             bool
	Format            string
	FormatFile        string
	Id                int64
}

// NewMonitorVPCRouterParam return new MonitorVPCRouterParam
func NewMonitorVPCRouterParam() *MonitorVPCRouterParam {
	return &MonitorVPCRouterParam{

		Index: "0",

		KeyFormat: "sakuracloud.{{.ID}}.vpcrouter",
	}
}

// Validate checks current values in model
func (p *MonitorVPCRouterParam) Validate() []error {
	errors := []error{}
	{
		validator := validateRequired
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["index"].ValidateFunc
		errs := validator("--index", p.Index)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["start"].ValidateFunc
		errs := validator("--start", p.Start)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := define.Resources["VPCRouter"].Commands["monitor"].Params["end"].ValidateFunc
		errs := validator("--end", p.End)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateRequired
		errs := validator("--key-format", p.KeyFormat)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		validator := validateSakuraID
		errs := validator("--id", p.Id)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	{
		validator := schema.ValidateInStrValues("json", "csv", "tsv")
		errs := validator("--output-type", p.OutputType)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateInputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}
	{
		errs := validateOutputOption(p)
		if errs != nil {
			errors = append(errors, errs...)
		}
	}

	return errors
}

func (p *MonitorVPCRouterParam) GetResourceDef() *schema.Resource {
	return define.Resources["VPCRouter"]
}

func (p *MonitorVPCRouterParam) GetCommandDef() *schema.Command {
	return p.GetResourceDef().Commands["monitor"]
}

func (p *MonitorVPCRouterParam) GetIncludeFields() []string {
	return p.GetCommandDef().IncludeFields
}

func (p *MonitorVPCRouterParam) GetExcludeFields() []string {
	return p.GetCommandDef().ExcludeFields
}

func (p *MonitorVPCRouterParam) GetTableType() output.TableType {
	return p.GetCommandDef().TableType
}

func (p *MonitorVPCRouterParam) GetColumnDefs() []output.ColumnDef {
	return p.GetCommandDef().TableColumnDefines
}

func (p *MonitorVPCRouterParam) GetOutputFormat() string {
	return "table"
}

func (p *MonitorVPCRouterParam) SetIndex(v string) {
	p.Index = v
}

func (p *MonitorVPCRouterParam) GetIndex() string {
	return p.Index
}
func (p *MonitorVPCRouterParam) SetStart(v string) {
	p.Start = v
}

func (p *MonitorVPCRouterParam) GetStart() string {
	return p.Start
}
func (p *MonitorVPCRouterParam) SetEnd(v string) {
	p.End = v
}

func (p *MonitorVPCRouterParam) GetEnd() string {
	return p.End
}
func (p *MonitorVPCRouterParam) SetKeyFormat(v string) {
	p.KeyFormat = v
}

func (p *MonitorVPCRouterParam) GetKeyFormat() string {
	return p.KeyFormat
}
func (p *MonitorVPCRouterParam) SetParamTemplate(v string) {
	p.ParamTemplate = v
}

func (p *MonitorVPCRouterParam) GetParamTemplate() string {
	return p.ParamTemplate
}
func (p *MonitorVPCRouterParam) SetParamTemplateFile(v string) {
	p.ParamTemplateFile = v
}

func (p *MonitorVPCRouterParam) GetParamTemplateFile() string {
	return p.ParamTemplateFile
}
func (p *MonitorVPCRouterParam) SetOutputType(v string) {
	p.OutputType = v
}

func (p *MonitorVPCRouterParam) GetOutputType() string {
	return p.OutputType
}
func (p *MonitorVPCRouterParam) SetColumn(v []string) {
	p.Column = v
}

func (p *MonitorVPCRouterParam) GetColumn() []string {
	return p.Column
}
func (p *MonitorVPCRouterParam) SetQuiet(v bool) {
	p.Quiet = v
}

func (p *MonitorVPCRouterParam) GetQuiet() bool {
	return p.Quiet
}
func (p *MonitorVPCRouterParam) SetFormat(v string) {
	p.Format = v
}

func (p *MonitorVPCRouterParam) GetFormat() string {
	return p.Format
}
func (p *MonitorVPCRouterParam) SetFormatFile(v string) {
	p.FormatFile = v
}

func (p *MonitorVPCRouterParam) GetFormatFile() string {
	return p.FormatFile
}
func (p *MonitorVPCRouterParam) SetId(v int64) {
	p.Id = v
}

func (p *MonitorVPCRouterParam) GetId() int64 {
	return p.Id
}
